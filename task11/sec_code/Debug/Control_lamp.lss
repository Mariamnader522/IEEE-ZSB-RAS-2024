
Control_lamp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000768  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007f8  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a9 02 	call	0x552	; 0x552 <main>
  64:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_Init>:

#include "dio_driver.h"
#include "STD_TYPES.h"
#include <avr/io.h>

void DIO_Init(u8 port, u8 pin, u8 direction) {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_Init+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_Init+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6a 83       	std	Y+2, r22	; 0x02
  7e:	4b 83       	std	Y+3, r20	; 0x03
    switch (port) {
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3d 83       	std	Y+5, r19	; 0x05
  88:	2c 83       	std	Y+4, r18	; 0x04
  8a:	8c 81       	ldd	r24, Y+4	; 0x04
  8c:	9d 81       	ldd	r25, Y+5	; 0x05
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	91 05       	cpc	r25, r1
  92:	09 f4       	brne	.+2      	; 0x96 <DIO_Init+0x2a>
  94:	43 c0       	rjmp	.+134    	; 0x11c <DIO_Init+0xb0>
  96:	2c 81       	ldd	r18, Y+4	; 0x04
  98:	3d 81       	ldd	r19, Y+5	; 0x05
  9a:	22 30       	cpi	r18, 0x02	; 2
  9c:	31 05       	cpc	r19, r1
  9e:	2c f4       	brge	.+10     	; 0xaa <DIO_Init+0x3e>
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	9d 81       	ldd	r25, Y+5	; 0x05
  a4:	00 97       	sbiw	r24, 0x00	; 0
  a6:	71 f0       	breq	.+28     	; 0xc4 <DIO_Init+0x58>
  a8:	bc c0       	rjmp	.+376    	; 0x222 <DIO_Init+0x1b6>
  aa:	2c 81       	ldd	r18, Y+4	; 0x04
  ac:	3d 81       	ldd	r19, Y+5	; 0x05
  ae:	22 30       	cpi	r18, 0x02	; 2
  b0:	31 05       	cpc	r19, r1
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_Init+0x4a>
  b4:	5f c0       	rjmp	.+190    	; 0x174 <DIO_Init+0x108>
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	9d 81       	ldd	r25, Y+5	; 0x05
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	91 05       	cpc	r25, r1
  be:	09 f4       	brne	.+2      	; 0xc2 <DIO_Init+0x56>
  c0:	85 c0       	rjmp	.+266    	; 0x1cc <DIO_Init+0x160>
  c2:	af c0       	rjmp	.+350    	; 0x222 <DIO_Init+0x1b6>
        case DIO_PORT_A:
            if (direction == 0) {
  c4:	8b 81       	ldd	r24, Y+3	; 0x03
  c6:	88 23       	and	r24, r24
  c8:	a9 f4       	brne	.+42     	; 0xf4 <DIO_Init+0x88>
                DDRA &= ~(1 << pin);  // Set pin as input
  ca:	aa e3       	ldi	r26, 0x3A	; 58
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ea e3       	ldi	r30, 0x3A	; 58
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	48 2f       	mov	r20, r24
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	28 2f       	mov	r18, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 2e       	mov	r0, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_Init+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_Init+0x78>
  ec:	80 95       	com	r24
  ee:	84 23       	and	r24, r20
  f0:	8c 93       	st	X, r24
  f2:	97 c0       	rjmp	.+302    	; 0x222 <DIO_Init+0x1b6>
            } else {
                DDRA |= (1 << pin);   // Set pin as output
  f4:	aa e3       	ldi	r26, 0x3A	; 58
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	ea e3       	ldi	r30, 0x3A	; 58
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	48 2f       	mov	r20, r24
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 2e       	mov	r0, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_Init+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_Init+0xa2>
 116:	84 2b       	or	r24, r20
 118:	8c 93       	st	X, r24
 11a:	83 c0       	rjmp	.+262    	; 0x222 <DIO_Init+0x1b6>
            }
            break;
        case DIO_PORT_B:
            if (direction == 0) {
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	88 23       	and	r24, r24
 120:	a9 f4       	brne	.+42     	; 0x14c <DIO_Init+0xe0>
                DDRB &= ~(1 << pin);  // Set pin as input
 122:	a7 e3       	ldi	r26, 0x37	; 55
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e7 e3       	ldi	r30, 0x37	; 55
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	48 2f       	mov	r20, r24
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_Init+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_Init+0xd0>
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	8c 93       	st	X, r24
 14a:	6b c0       	rjmp	.+214    	; 0x222 <DIO_Init+0x1b6>
            } else {
                DDRB |= (1 << pin);   // Set pin as output
 14c:	a7 e3       	ldi	r26, 0x37	; 55
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e7 e3       	ldi	r30, 0x37	; 55
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	48 2f       	mov	r20, r24
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_Init+0xfe>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_Init+0xfa>
 16e:	84 2b       	or	r24, r20
 170:	8c 93       	st	X, r24
 172:	57 c0       	rjmp	.+174    	; 0x222 <DIO_Init+0x1b6>
            }
            break;
        case DIO_PORT_C:
            if (direction == 0) {
 174:	8b 81       	ldd	r24, Y+3	; 0x03
 176:	88 23       	and	r24, r24
 178:	a9 f4       	brne	.+42     	; 0x1a4 <DIO_Init+0x138>
                 DDRC &= ~(1 << pin);  // Set pin as input
 17a:	a4 e3       	ldi	r26, 0x34	; 52
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	e4 e3       	ldi	r30, 0x34	; 52
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	48 2f       	mov	r20, r24
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 2e       	mov	r0, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_Init+0x12c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_Init+0x128>
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	8c 93       	st	X, r24
 1a2:	3f c0       	rjmp	.+126    	; 0x222 <DIO_Init+0x1b6>
            } else {
                 DDRC |= (1 << pin);   // Set pin as output
 1a4:	a4 e3       	ldi	r26, 0x34	; 52
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	e4 e3       	ldi	r30, 0x34	; 52
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	48 2f       	mov	r20, r24
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_Init+0x156>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_Init+0x152>
 1c6:	84 2b       	or	r24, r20
 1c8:	8c 93       	st	X, r24
 1ca:	2b c0       	rjmp	.+86     	; 0x222 <DIO_Init+0x1b6>
            }
            break;
        case DIO_PORT_D:
             if (direction == 0) {
 1cc:	8b 81       	ldd	r24, Y+3	; 0x03
 1ce:	88 23       	and	r24, r24
 1d0:	a9 f4       	brne	.+42     	; 0x1fc <DIO_Init+0x190>
                 DDRD &= ~(1 << pin);  // Set pin as input
 1d2:	a1 e3       	ldi	r26, 0x31	; 49
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e1 e3       	ldi	r30, 0x31	; 49
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	48 2f       	mov	r20, r24
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_Init+0x184>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_Init+0x180>
 1f4:	80 95       	com	r24
 1f6:	84 23       	and	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	13 c0       	rjmp	.+38     	; 0x222 <DIO_Init+0x1b6>
            } else {
                 DDRD |= (1 << pin);   // Set pin as output
 1fc:	a1 e3       	ldi	r26, 0x31	; 49
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e1 e3       	ldi	r30, 0x31	; 49
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_Init+0x1ae>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_Init+0x1aa>
 21e:	84 2b       	or	r24, r20
 220:	8c 93       	st	X, r24
            break;
        default:
        	break;

    }
}
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	cf 91       	pop	r28
 22e:	df 91       	pop	r29
 230:	08 95       	ret

00000232 <DIO_Write>:

void DIO_Write(u8 port, u8 pin, u8 value) {
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	00 d0       	rcall	.+0      	; 0x238 <DIO_Write+0x6>
 238:	00 d0       	rcall	.+0      	; 0x23a <DIO_Write+0x8>
 23a:	0f 92       	push	r0
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	6a 83       	std	Y+2, r22	; 0x02
 244:	4b 83       	std	Y+3, r20	; 0x03
    switch (port) {
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	3d 83       	std	Y+5, r19	; 0x05
 24e:	2c 83       	std	Y+4, r18	; 0x04
 250:	8c 81       	ldd	r24, Y+4	; 0x04
 252:	9d 81       	ldd	r25, Y+5	; 0x05
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	91 05       	cpc	r25, r1
 258:	09 f4       	brne	.+2      	; 0x25c <DIO_Write+0x2a>
 25a:	43 c0       	rjmp	.+134    	; 0x2e2 <DIO_Write+0xb0>
 25c:	2c 81       	ldd	r18, Y+4	; 0x04
 25e:	3d 81       	ldd	r19, Y+5	; 0x05
 260:	22 30       	cpi	r18, 0x02	; 2
 262:	31 05       	cpc	r19, r1
 264:	2c f4       	brge	.+10     	; 0x270 <DIO_Write+0x3e>
 266:	8c 81       	ldd	r24, Y+4	; 0x04
 268:	9d 81       	ldd	r25, Y+5	; 0x05
 26a:	00 97       	sbiw	r24, 0x00	; 0
 26c:	71 f0       	breq	.+28     	; 0x28a <DIO_Write+0x58>
 26e:	bc c0       	rjmp	.+376    	; 0x3e8 <DIO_Write+0x1b6>
 270:	2c 81       	ldd	r18, Y+4	; 0x04
 272:	3d 81       	ldd	r19, Y+5	; 0x05
 274:	22 30       	cpi	r18, 0x02	; 2
 276:	31 05       	cpc	r19, r1
 278:	09 f4       	brne	.+2      	; 0x27c <DIO_Write+0x4a>
 27a:	5f c0       	rjmp	.+190    	; 0x33a <DIO_Write+0x108>
 27c:	8c 81       	ldd	r24, Y+4	; 0x04
 27e:	9d 81       	ldd	r25, Y+5	; 0x05
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	91 05       	cpc	r25, r1
 284:	09 f4       	brne	.+2      	; 0x288 <DIO_Write+0x56>
 286:	85 c0       	rjmp	.+266    	; 0x392 <DIO_Write+0x160>
 288:	af c0       	rjmp	.+350    	; 0x3e8 <DIO_Write+0x1b6>
        case DIO_PORT_A:
            if (value == 0) {
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	88 23       	and	r24, r24
 28e:	a9 f4       	brne	.+42     	; 0x2ba <DIO_Write+0x88>
                PORTA &= ~(1 << pin);  // Clear bit
 290:	ab e3       	ldi	r26, 0x3B	; 59
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	eb e3       	ldi	r30, 0x3B	; 59
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	48 2f       	mov	r20, r24
 29c:	8a 81       	ldd	r24, Y+2	; 0x02
 29e:	28 2f       	mov	r18, r24
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 2e       	mov	r0, r18
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_Write+0x7c>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	0a 94       	dec	r0
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_Write+0x78>
 2b2:	80 95       	com	r24
 2b4:	84 23       	and	r24, r20
 2b6:	8c 93       	st	X, r24
 2b8:	97 c0       	rjmp	.+302    	; 0x3e8 <DIO_Write+0x1b6>
            } else {
                PORTA |= (1 << pin);   // Set bit
 2ba:	ab e3       	ldi	r26, 0x3B	; 59
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	eb e3       	ldi	r30, 0x3B	; 59
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	48 2f       	mov	r20, r24
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_Write+0xa6>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_Write+0xa2>
 2dc:	84 2b       	or	r24, r20
 2de:	8c 93       	st	X, r24
 2e0:	83 c0       	rjmp	.+262    	; 0x3e8 <DIO_Write+0x1b6>
            }
            break;
        case DIO_PORT_B:
            if (value == 0) {
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	88 23       	and	r24, r24
 2e6:	a9 f4       	brne	.+42     	; 0x312 <DIO_Write+0xe0>
                PORTB &= ~(1 << pin);  // Clear bit
 2e8:	a8 e3       	ldi	r26, 0x38	; 56
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e8 e3       	ldi	r30, 0x38	; 56
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	48 2f       	mov	r20, r24
 2f4:	8a 81       	ldd	r24, Y+2	; 0x02
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 2e       	mov	r0, r18
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_Write+0xd4>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_Write+0xd0>
 30a:	80 95       	com	r24
 30c:	84 23       	and	r24, r20
 30e:	8c 93       	st	X, r24
 310:	6b c0       	rjmp	.+214    	; 0x3e8 <DIO_Write+0x1b6>
            } else {
                PORTB |= (1 << pin);   // Set bit
 312:	a8 e3       	ldi	r26, 0x38	; 56
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	e8 e3       	ldi	r30, 0x38	; 56
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	48 2f       	mov	r20, r24
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 2e       	mov	r0, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_Write+0xfe>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_Write+0xfa>
 334:	84 2b       	or	r24, r20
 336:	8c 93       	st	X, r24
 338:	57 c0       	rjmp	.+174    	; 0x3e8 <DIO_Write+0x1b6>
            }
            break;
        case DIO_PORT_C:
            if (value == 0) {
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	88 23       	and	r24, r24
 33e:	a9 f4       	brne	.+42     	; 0x36a <DIO_Write+0x138>
                PORTC &= ~(1 << pin);  // Clear bit
 340:	a5 e3       	ldi	r26, 0x35	; 53
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	e5 e3       	ldi	r30, 0x35	; 53
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	48 2f       	mov	r20, r24
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 2e       	mov	r0, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_Write+0x12c>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_Write+0x128>
 362:	80 95       	com	r24
 364:	84 23       	and	r24, r20
 366:	8c 93       	st	X, r24
 368:	3f c0       	rjmp	.+126    	; 0x3e8 <DIO_Write+0x1b6>
            } else {
                PORTC |= (1 << pin);   // Set bit
 36a:	a5 e3       	ldi	r26, 0x35	; 53
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	e5 e3       	ldi	r30, 0x35	; 53
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	48 2f       	mov	r20, r24
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 2e       	mov	r0, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_Write+0x156>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_Write+0x152>
 38c:	84 2b       	or	r24, r20
 38e:	8c 93       	st	X, r24
 390:	2b c0       	rjmp	.+86     	; 0x3e8 <DIO_Write+0x1b6>
            }
            break;
        case DIO_PORT_D:
            if (value == 0) {
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	88 23       	and	r24, r24
 396:	a9 f4       	brne	.+42     	; 0x3c2 <DIO_Write+0x190>
                PORTD &= ~(1 << pin);  // Clear bit
 398:	a2 e3       	ldi	r26, 0x32	; 50
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	e2 e3       	ldi	r30, 0x32	; 50
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	48 2f       	mov	r20, r24
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 2e       	mov	r0, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_Write+0x184>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_Write+0x180>
 3ba:	80 95       	com	r24
 3bc:	84 23       	and	r24, r20
 3be:	8c 93       	st	X, r24
 3c0:	13 c0       	rjmp	.+38     	; 0x3e8 <DIO_Write+0x1b6>
            } else {
                PORTD |= (1 << pin);   // Set bit
 3c2:	a2 e3       	ldi	r26, 0x32	; 50
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	e2 e3       	ldi	r30, 0x32	; 50
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	48 2f       	mov	r20, r24
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 2e       	mov	r0, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_Write+0x1ae>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_Write+0x1aa>
 3e4:	84 2b       	or	r24, r20
 3e6:	8c 93       	st	X, r24
            }
            break;
            default: break ;
    }
}
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	08 95       	ret

000003f8 <DIO_Read>:

u8 DIO_Read(u8 port, u8 pin) {
 3f8:	df 93       	push	r29
 3fa:	cf 93       	push	r28
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <DIO_Read+0x6>
 3fe:	00 d0       	rcall	.+0      	; 0x400 <DIO_Read+0x8>
 400:	0f 92       	push	r0
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	6a 83       	std	Y+2, r22	; 0x02
    switch (port) {
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	3d 83       	std	Y+5, r19	; 0x05
 412:	2c 83       	std	Y+4, r18	; 0x04
 414:	4c 81       	ldd	r20, Y+4	; 0x04
 416:	5d 81       	ldd	r21, Y+5	; 0x05
 418:	41 30       	cpi	r20, 0x01	; 1
 41a:	51 05       	cpc	r21, r1
 41c:	b1 f1       	breq	.+108    	; 0x48a <DIO_Read+0x92>
 41e:	8c 81       	ldd	r24, Y+4	; 0x04
 420:	9d 81       	ldd	r25, Y+5	; 0x05
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	91 05       	cpc	r25, r1
 426:	34 f4       	brge	.+12     	; 0x434 <DIO_Read+0x3c>
 428:	2c 81       	ldd	r18, Y+4	; 0x04
 42a:	3d 81       	ldd	r19, Y+5	; 0x05
 42c:	21 15       	cp	r18, r1
 42e:	31 05       	cpc	r19, r1
 430:	71 f0       	breq	.+28     	; 0x44e <DIO_Read+0x56>
 432:	85 c0       	rjmp	.+266    	; 0x53e <DIO_Read+0x146>
 434:	4c 81       	ldd	r20, Y+4	; 0x04
 436:	5d 81       	ldd	r21, Y+5	; 0x05
 438:	42 30       	cpi	r20, 0x02	; 2
 43a:	51 05       	cpc	r21, r1
 43c:	09 f4       	brne	.+2      	; 0x440 <DIO_Read+0x48>
 43e:	43 c0       	rjmp	.+134    	; 0x4c6 <DIO_Read+0xce>
 440:	8c 81       	ldd	r24, Y+4	; 0x04
 442:	9d 81       	ldd	r25, Y+5	; 0x05
 444:	83 30       	cpi	r24, 0x03	; 3
 446:	91 05       	cpc	r25, r1
 448:	09 f4       	brne	.+2      	; 0x44c <DIO_Read+0x54>
 44a:	5b c0       	rjmp	.+182    	; 0x502 <DIO_Read+0x10a>
 44c:	78 c0       	rjmp	.+240    	; 0x53e <DIO_Read+0x146>
        case DIO_PORT_A:
            return (PINA & (1 << pin)) >> pin;
 44e:	e9 e3       	ldi	r30, 0x39	; 57
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	48 2f       	mov	r20, r24
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	8a 81       	ldd	r24, Y+2	; 0x02
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_Read+0x70>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	2a 95       	dec	r18
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_Read+0x6c>
 46c:	9a 01       	movw	r18, r20
 46e:	28 23       	and	r18, r24
 470:	39 23       	and	r19, r25
 472:	8a 81       	ldd	r24, Y+2	; 0x02
 474:	88 2f       	mov	r24, r24
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	a9 01       	movw	r20, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_Read+0x88>
 47c:	55 95       	asr	r21
 47e:	47 95       	ror	r20
 480:	8a 95       	dec	r24
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_Read+0x84>
 484:	ca 01       	movw	r24, r20
 486:	8b 83       	std	Y+3, r24	; 0x03
 488:	5b c0       	rjmp	.+182    	; 0x540 <DIO_Read+0x148>
        case DIO_PORT_B:
            return (PINB & (1 << pin)) >> pin;
 48a:	e6 e3       	ldi	r30, 0x36	; 54
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	48 2f       	mov	r20, r24
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	8a 81       	ldd	r24, Y+2	; 0x02
 496:	28 2f       	mov	r18, r24
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_Read+0xac>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	2a 95       	dec	r18
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_Read+0xa8>
 4a8:	9a 01       	movw	r18, r20
 4aa:	28 23       	and	r18, r24
 4ac:	39 23       	and	r19, r25
 4ae:	8a 81       	ldd	r24, Y+2	; 0x02
 4b0:	88 2f       	mov	r24, r24
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	a9 01       	movw	r20, r18
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_Read+0xc4>
 4b8:	55 95       	asr	r21
 4ba:	47 95       	ror	r20
 4bc:	8a 95       	dec	r24
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_Read+0xc0>
 4c0:	ca 01       	movw	r24, r20
 4c2:	8b 83       	std	Y+3, r24	; 0x03
 4c4:	3d c0       	rjmp	.+122    	; 0x540 <DIO_Read+0x148>
        case DIO_PORT_C:
            return (PINC & (1 << pin)) >> pin;
 4c6:	e3 e3       	ldi	r30, 0x33	; 51
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	48 2f       	mov	r20, r24
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	28 2f       	mov	r18, r24
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_Read+0xe8>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	2a 95       	dec	r18
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_Read+0xe4>
 4e4:	9a 01       	movw	r18, r20
 4e6:	28 23       	and	r18, r24
 4e8:	39 23       	and	r19, r25
 4ea:	8a 81       	ldd	r24, Y+2	; 0x02
 4ec:	88 2f       	mov	r24, r24
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	a9 01       	movw	r20, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_Read+0x100>
 4f4:	55 95       	asr	r21
 4f6:	47 95       	ror	r20
 4f8:	8a 95       	dec	r24
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_Read+0xfc>
 4fc:	ca 01       	movw	r24, r20
 4fe:	8b 83       	std	Y+3, r24	; 0x03
 500:	1f c0       	rjmp	.+62     	; 0x540 <DIO_Read+0x148>
        case DIO_PORT_D:
            return (PIND & (1 << pin)) >> pin;
 502:	e0 e3       	ldi	r30, 0x30	; 48
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	48 2f       	mov	r20, r24
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_Read+0x124>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	2a 95       	dec	r18
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_Read+0x120>
 520:	9a 01       	movw	r18, r20
 522:	28 23       	and	r18, r24
 524:	39 23       	and	r19, r25
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	88 2f       	mov	r24, r24
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	a9 01       	movw	r20, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_Read+0x13c>
 530:	55 95       	asr	r21
 532:	47 95       	ror	r20
 534:	8a 95       	dec	r24
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_Read+0x138>
 538:	ca 01       	movw	r24, r20
 53a:	8b 83       	std	Y+3, r24	; 0x03
 53c:	01 c0       	rjmp	.+2      	; 0x540 <DIO_Read+0x148>
        default:
            return 0;
 53e:	1b 82       	std	Y+3, r1	; 0x03
 540:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	cf 91       	pop	r28
 54e:	df 91       	pop	r29
 550:	08 95       	ret

00000552 <main>:
#include <avr/io.h>

#define SET_BUTTON DIO_PORT_C, DIO_PIN7
#define RESET_BUTTON DIO_PORT_C, DIO_PIN6

int main(void) {
 552:	df 93       	push	r29
 554:	cf 93       	push	r28
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
    DIO_Init(SET_BUTTON, 0);  //set buttons as inputs with pull-ups
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	67 e0       	ldi	r22, 0x07	; 7
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_Init>
    DIO_Init(RESET_BUTTON, 0);
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	66 e0       	ldi	r22, 0x06	; 6
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_Init>
    DIO_Write(DIO_PORT_C, DIO_PIN7, 1);
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	67 e0       	ldi	r22, 0x07	; 7
 572:	41 e0       	ldi	r20, 0x01	; 1
 574:	0e 94 19 01 	call	0x232	; 0x232 <DIO_Write>
    DIO_Write(DIO_PORT_C, DIO_PIN6, 1);
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	66 e0       	ldi	r22, 0x06	; 6
 57c:	41 e0       	ldi	r20, 0x01	; 1
 57e:	0e 94 19 01 	call	0x232	; 0x232 <DIO_Write>

    while (1) {
        if (DIO_Read(SET_BUTTON) == 1) {
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	67 e0       	ldi	r22, 0x07	; 7
 586:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_Read>
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	29 f4       	brne	.+10     	; 0x598 <main+0x46>
            DIO_Write(DIO_PORT_C, DIO_PIN0, 1);
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	41 e0       	ldi	r20, 0x01	; 1
 594:	0e 94 19 01 	call	0x232	; 0x232 <DIO_Write>
        }
        if (DIO_Read(RESET_BUTTON) == 1) {
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	66 e0       	ldi	r22, 0x06	; 6
 59c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_Read>
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	79 f7       	brne	.-34     	; 0x582 <main+0x30>
            DIO_Write(DIO_PORT_C, DIO_PIN0, 0);
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	0e 94 19 01 	call	0x232	; 0x232 <DIO_Write>
 5ae:	e9 cf       	rjmp	.-46     	; 0x582 <main+0x30>

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
