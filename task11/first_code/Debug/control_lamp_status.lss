
control_lamp_status.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000318  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006ae  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>
#define setButton (PINC&0b10000000)
#define resetButton (PINC&0b01000000)
int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
    DDRC=0b00111111; //define buttons as inputs
  74:	e4 e3       	ldi	r30, 0x34	; 52
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	8f e3       	ldi	r24, 0x3F	; 63
  7a:	80 83       	st	Z, r24
    PORTC=0b11000000; //set PORT=1 activate internal pull up
  7c:	e5 e3       	ldi	r30, 0x35	; 53
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 ec       	ldi	r24, 0xC0	; 192
  82:	80 83       	st	Z, r24
    while (1)
    {
        if (setButton==0) PORTC=0b11000001;
  84:	e3 e3       	ldi	r30, 0x33	; 51
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	88 23       	and	r24, r24
  8c:	24 f0       	brlt	.+8      	; 0x96 <main+0x2a>
  8e:	e5 e3       	ldi	r30, 0x35	; 53
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	81 ec       	ldi	r24, 0xC1	; 193
  94:	80 83       	st	Z, r24
        if (resetButton==0)  PORTC=0b11000000;
  96:	e3 e3       	ldi	r30, 0x33	; 51
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	88 2f       	mov	r24, r24
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	80 74       	andi	r24, 0x40	; 64
  a2:	90 70       	andi	r25, 0x00	; 0
  a4:	00 97       	sbiw	r24, 0x00	; 0
  a6:	71 f7       	brne	.-36     	; 0x84 <main+0x18>
  a8:	e5 e3       	ldi	r30, 0x35	; 53
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 83       	st	Z, r24
  b0:	e9 cf       	rjmp	.-46     	; 0x84 <main+0x18>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
