
claculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003228  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00003228  000032bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  008000fe  008000fe  0000335a  2**0
                  ALLOC
  3 .stab         000028ec  00000000  00000000  0000335c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001460  00000000  00000000  00005c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000093dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a4dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b460  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b8a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c130  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 32       	cpi	r26, 0x28	; 40
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <main>
      8a:	0c 94 12 19 	jmp	0x3224	; 0x3224 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ea       	ldi	r26, 0xAA	; 170
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ea       	ldi	r24, 0xAA	; 170
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a ea       	ldi	r22, 0xAA	; 170
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 07 19 	jmp	0x320e	; 0x320e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Dio_init>:
#include "Dio.h"


void Dio_init()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	u8 counter=0;
     ca8:	19 82       	std	Y+1, r1	; 0x01
	for(counter=0;counter<PIN_COUNT;counter++)
     caa:	19 82       	std	Y+1, r1	; 0x01
     cac:	72 c1       	rjmp	.+740    	; 0xf92 <Dio_init+0x2f4>
	{
		if(pin[counter].port == PORT_A)
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	c9 01       	movw	r24, r18
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	82 0f       	add	r24, r18
     cbc:	93 1f       	adc	r25, r19
     cbe:	fc 01       	movw	r30, r24
     cc0:	ee 54       	subi	r30, 0x4E	; 78
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	80 81       	ld	r24, Z
     cc6:	88 23       	and	r24, r24
     cc8:	09 f0       	breq	.+2      	; 0xccc <Dio_init+0x2e>
     cca:	4d c0       	rjmp	.+154    	; 0xd66 <Dio_init+0xc8>
		{
			if(pin[counter].direction == OUTPUT)
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	c9 01       	movw	r24, r18
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	82 0f       	add	r24, r18
     cda:	93 1f       	adc	r25, r19
     cdc:	fc 01       	movw	r30, r24
     cde:	ec 54       	subi	r30, 0x4C	; 76
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 81       	ld	r24, Z
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	f9 f4       	brne	.+62     	; 0xd26 <Dio_init+0x88>
				SET_BIT(DDRA,pin[counter].pin);
     ce8:	aa e3       	ldi	r26, 0x3A	; 58
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	ea e3       	ldi	r30, 0x3A	; 58
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	48 2f       	mov	r20, r24
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	c9 01       	movw	r24, r18
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	82 0f       	add	r24, r18
     d02:	93 1f       	adc	r25, r19
     d04:	fc 01       	movw	r30, r24
     d06:	ed 54       	subi	r30, 0x4D	; 77
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	80 81       	ld	r24, Z
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <Dio_init+0x7e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <Dio_init+0x7a>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	33 c1       	rjmp	.+614    	; 0xf8c <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRA,pin[counter].pin);
     d26:	aa e3       	ldi	r26, 0x3A	; 58
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ea e3       	ldi	r30, 0x3A	; 58
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	c9 01       	movw	r24, r18
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	82 0f       	add	r24, r18
     d40:	93 1f       	adc	r25, r19
     d42:	fc 01       	movw	r30, r24
     d44:	ed 54       	subi	r30, 0x4D	; 77
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	80 81       	ld	r24, Z
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <Dio_init+0xbc>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <Dio_init+0xb8>
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	13 c1       	rjmp	.+550    	; 0xf8c <Dio_init+0x2ee>
		}
		else if(pin[counter].port == PORT_B)
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	c9 01       	movw	r24, r18
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	82 0f       	add	r24, r18
     d74:	93 1f       	adc	r25, r19
     d76:	fc 01       	movw	r30, r24
     d78:	ee 54       	subi	r30, 0x4E	; 78
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	80 81       	ld	r24, Z
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	09 f0       	breq	.+2      	; 0xd84 <Dio_init+0xe6>
     d82:	4d c0       	rjmp	.+154    	; 0xe1e <Dio_init+0x180>
		{
			if(pin[counter].direction == OUTPUT)
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	c9 01       	movw	r24, r18
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	82 0f       	add	r24, r18
     d92:	93 1f       	adc	r25, r19
     d94:	fc 01       	movw	r30, r24
     d96:	ec 54       	subi	r30, 0x4C	; 76
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	80 81       	ld	r24, Z
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	f9 f4       	brne	.+62     	; 0xdde <Dio_init+0x140>
				SET_BIT(DDRB,pin[counter].pin);
     da0:	a7 e3       	ldi	r26, 0x37	; 55
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e7 e3       	ldi	r30, 0x37	; 55
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	c9 01       	movw	r24, r18
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	82 0f       	add	r24, r18
     dba:	93 1f       	adc	r25, r19
     dbc:	fc 01       	movw	r30, r24
     dbe:	ed 54       	subi	r30, 0x4D	; 77
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	80 81       	ld	r24, Z
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 2e       	mov	r0, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <Dio_init+0x136>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	0a 94       	dec	r0
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <Dio_init+0x132>
     dd8:	84 2b       	or	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	d7 c0       	rjmp	.+430    	; 0xf8c <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRB,pin[counter].pin);
     dde:	a7 e3       	ldi	r26, 0x37	; 55
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e7 e3       	ldi	r30, 0x37	; 55
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	c9 01       	movw	r24, r18
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	82 0f       	add	r24, r18
     df8:	93 1f       	adc	r25, r19
     dfa:	fc 01       	movw	r30, r24
     dfc:	ed 54       	subi	r30, 0x4D	; 77
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	80 81       	ld	r24, Z
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <Dio_init+0x174>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <Dio_init+0x170>
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	b7 c0       	rjmp	.+366    	; 0xf8c <Dio_init+0x2ee>
		}
		else if(pin[counter].port == PORT_C)
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	c9 01       	movw	r24, r18
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	82 0f       	add	r24, r18
     e2c:	93 1f       	adc	r25, r19
     e2e:	fc 01       	movw	r30, r24
     e30:	ee 54       	subi	r30, 0x4E	; 78
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	09 f0       	breq	.+2      	; 0xe3c <Dio_init+0x19e>
     e3a:	4d c0       	rjmp	.+154    	; 0xed6 <Dio_init+0x238>
		{
			if(pin[counter].direction == OUTPUT)
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	c9 01       	movw	r24, r18
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	82 0f       	add	r24, r18
     e4a:	93 1f       	adc	r25, r19
     e4c:	fc 01       	movw	r30, r24
     e4e:	ec 54       	subi	r30, 0x4C	; 76
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	80 81       	ld	r24, Z
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	f9 f4       	brne	.+62     	; 0xe96 <Dio_init+0x1f8>
				SET_BIT(DDRC,pin[counter].pin);
     e58:	a4 e3       	ldi	r26, 0x34	; 52
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e4 e3       	ldi	r30, 0x34	; 52
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	c9 01       	movw	r24, r18
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	fc 01       	movw	r30, r24
     e76:	ed 54       	subi	r30, 0x4D	; 77
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	80 81       	ld	r24, Z
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <Dio_init+0x1ee>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <Dio_init+0x1ea>
     e90:	84 2b       	or	r24, r20
     e92:	8c 93       	st	X, r24
     e94:	7b c0       	rjmp	.+246    	; 0xf8c <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRC,pin[counter].pin);
     e96:	a4 e3       	ldi	r26, 0x34	; 52
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e4 e3       	ldi	r30, 0x34	; 52
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	c9 01       	movw	r24, r18
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	82 0f       	add	r24, r18
     eb0:	93 1f       	adc	r25, r19
     eb2:	fc 01       	movw	r30, r24
     eb4:	ed 54       	subi	r30, 0x4D	; 77
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	80 81       	ld	r24, Z
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <Dio_init+0x22c>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <Dio_init+0x228>
     ece:	80 95       	com	r24
     ed0:	84 23       	and	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	5b c0       	rjmp	.+182    	; 0xf8c <Dio_init+0x2ee>
		}
		else if(pin[counter].port == PORT_D)
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	c9 01       	movw	r24, r18
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	82 0f       	add	r24, r18
     ee4:	93 1f       	adc	r25, r19
     ee6:	fc 01       	movw	r30, r24
     ee8:	ee 54       	subi	r30, 0x4E	; 78
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	80 81       	ld	r24, Z
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	09 f0       	breq	.+2      	; 0xef4 <Dio_init+0x256>
     ef2:	4c c0       	rjmp	.+152    	; 0xf8c <Dio_init+0x2ee>
		{
			if(pin[counter].direction == OUTPUT)
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	c9 01       	movw	r24, r18
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	82 0f       	add	r24, r18
     f02:	93 1f       	adc	r25, r19
     f04:	fc 01       	movw	r30, r24
     f06:	ec 54       	subi	r30, 0x4C	; 76
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	f9 f4       	brne	.+62     	; 0xf4e <Dio_init+0x2b0>
				SET_BIT(DDRD,pin[counter].pin);
     f10:	a1 e3       	ldi	r26, 0x31	; 49
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e1 e3       	ldi	r30, 0x31	; 49
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	c9 01       	movw	r24, r18
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	fc 01       	movw	r30, r24
     f2e:	ed 54       	subi	r30, 0x4D	; 77
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	80 81       	ld	r24, Z
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <Dio_init+0x2a6>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <Dio_init+0x2a2>
     f48:	84 2b       	or	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	1f c0       	rjmp	.+62     	; 0xf8c <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRD,pin[counter].pin);
     f4e:	a1 e3       	ldi	r26, 0x31	; 49
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e1 e3       	ldi	r30, 0x31	; 49
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	c9 01       	movw	r24, r18
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	fc 01       	movw	r30, r24
     f6c:	ed 54       	subi	r30, 0x4D	; 77
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	80 81       	ld	r24, Z
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <Dio_init+0x2e4>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <Dio_init+0x2e0>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24


void Dio_init()
{
	u8 counter=0;
	for(counter=0;counter<PIN_COUNT;counter++)
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	8f 5f       	subi	r24, 0xFF	; 255
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	83 31       	cpi	r24, 0x13	; 19
     f96:	08 f4       	brcc	.+2      	; 0xf9a <Dio_init+0x2fc>
     f98:	8a ce       	rjmp	.-748    	; 0xcae <Dio_init+0x10>
				SET_BIT(DDRD,pin[counter].pin);
			else
				CLEAR_BIT(DDRD,pin[counter].pin);
		}
	}
}
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <Dio_Write>:
void Dio_Write(channel_t ch,Dio_state_t state)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <Dio_Write+0x6>
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <Dio_Write+0x8>
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	6c 83       	std	Y+4, r22	; 0x04
	Dio_port_t port = ch / 8;
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	86 95       	lsr	r24
     fb6:	86 95       	lsr	r24
     fb8:	86 95       	lsr	r24
     fba:	8a 83       	std	Y+2, r24	; 0x02
	Dio_pin_t pin = ch % 8;
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	87 70       	andi	r24, 0x07	; 7
     fc0:	89 83       	std	Y+1, r24	; 0x01

	if(port == PORT_A)
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	88 23       	and	r24, r24
     fc6:	81 f5       	brne	.+96     	; 0x1028 <Dio_Write+0x86>
	{
		if(state == HIGH)
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <Dio_Write+0x54>
		{
			SET_BIT(PORTA,pin);
     fce:	ab e3       	ldi	r26, 0x3B	; 59
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	eb e3       	ldi	r30, 0x3B	; 59
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <Dio_Write+0x4a>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <Dio_Write+0x46>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	b0 c0       	rjmp	.+352    	; 0x1156 <Dio_Write+0x1b4>
		}
		else if(state == LOW)
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	88 23       	and	r24, r24
     ffa:	09 f0       	breq	.+2      	; 0xffe <Dio_Write+0x5c>
     ffc:	ac c0       	rjmp	.+344    	; 0x1156 <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTA,pin);
     ffe:	ab e3       	ldi	r26, 0x3B	; 59
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	eb e3       	ldi	r30, 0x3B	; 59
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <Dio_Write+0x7a>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <Dio_Write+0x76>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	97 c0       	rjmp	.+302    	; 0x1156 <Dio_Write+0x1b4>
		}
	}
	else if(port == PORT_B)
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	81 f5       	brne	.+96     	; 0x108e <Dio_Write+0xec>
	{
		if(state == HIGH)
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	a1 f4       	brne	.+40     	; 0x105c <Dio_Write+0xba>
		{
			SET_BIT(PORTB,pin);
    1034:	a8 e3       	ldi	r26, 0x38	; 56
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e8 e3       	ldi	r30, 0x38	; 56
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <Dio_Write+0xb0>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <Dio_Write+0xac>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	7d c0       	rjmp	.+250    	; 0x1156 <Dio_Write+0x1b4>
		}
		else if(state == LOW)
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	88 23       	and	r24, r24
    1060:	09 f0       	breq	.+2      	; 0x1064 <Dio_Write+0xc2>
    1062:	79 c0       	rjmp	.+242    	; 0x1156 <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTB,pin);
    1064:	a8 e3       	ldi	r26, 0x38	; 56
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e8 e3       	ldi	r30, 0x38	; 56
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <Dio_Write+0xe0>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <Dio_Write+0xdc>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	64 c0       	rjmp	.+200    	; 0x1156 <Dio_Write+0x1b4>
		}
	}
	else if(port == PORT_C)
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	82 30       	cpi	r24, 0x02	; 2
    1092:	81 f5       	brne	.+96     	; 0x10f4 <Dio_Write+0x152>
	{
		if(state == HIGH)
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	a1 f4       	brne	.+40     	; 0x10c2 <Dio_Write+0x120>
		{
			SET_BIT(PORTC,pin);
    109a:	a5 e3       	ldi	r26, 0x35	; 53
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e5 e3       	ldi	r30, 0x35	; 53
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <Dio_Write+0x116>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <Dio_Write+0x112>
    10bc:	84 2b       	or	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	4a c0       	rjmp	.+148    	; 0x1156 <Dio_Write+0x1b4>
		}
		else if(state == LOW)
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	88 23       	and	r24, r24
    10c6:	09 f0       	breq	.+2      	; 0x10ca <Dio_Write+0x128>
    10c8:	46 c0       	rjmp	.+140    	; 0x1156 <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTC,pin);
    10ca:	a5 e3       	ldi	r26, 0x35	; 53
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e3       	ldi	r30, 0x35	; 53
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <Dio_Write+0x146>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <Dio_Write+0x142>
    10ec:	80 95       	com	r24
    10ee:	84 23       	and	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	31 c0       	rjmp	.+98     	; 0x1156 <Dio_Write+0x1b4>
		}
	}
	else if(port == PORT_D)
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	71 f5       	brne	.+92     	; 0x1156 <Dio_Write+0x1b4>
	{
		if(state == HIGH)
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	a1 f4       	brne	.+40     	; 0x1128 <Dio_Write+0x186>
		{
			SET_BIT(PORTD,pin);
    1100:	a2 e3       	ldi	r26, 0x32	; 50
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e2 e3       	ldi	r30, 0x32	; 50
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <Dio_Write+0x17c>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <Dio_Write+0x178>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	17 c0       	rjmp	.+46     	; 0x1156 <Dio_Write+0x1b4>
		}
		else if(state == LOW)
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	88 23       	and	r24, r24
    112c:	a1 f4       	brne	.+40     	; 0x1156 <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTD,pin);
    112e:	a2 e3       	ldi	r26, 0x32	; 50
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e2 e3       	ldi	r30, 0x32	; 50
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <Dio_Write+0x1aa>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <Dio_Write+0x1a6>
    1150:	80 95       	com	r24
    1152:	84 23       	and	r24, r20
    1154:	8c 93       	st	X, r24
		}
	}


}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <Dio_Read>:
Dio_state_t Dio_Read(channel_t ch)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <Dio_Read+0x6>
    116a:	00 d0       	rcall	.+0      	; 0x116c <Dio_Read+0x8>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	8c 83       	std	Y+4, r24	; 0x04
	Dio_state_t state = LOW;
    1172:	1b 82       	std	Y+3, r1	; 0x03
	Dio_port_t port = ch / 8;
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	86 95       	lsr	r24
    1178:	86 95       	lsr	r24
    117a:	86 95       	lsr	r24
    117c:	8a 83       	std	Y+2, r24	; 0x02
	Dio_pin_t pin = ch % 8;
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	87 70       	andi	r24, 0x07	; 7
    1182:	89 83       	std	Y+1, r24	; 0x01
	if(port == PORT_A)
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	88 23       	and	r24, r24
    1188:	91 f4       	brne	.+36     	; 0x11ae <Dio_Read+0x4a>
	{
		state = READ_BIT(PINA,pin);
    118a:	e9 e3       	ldi	r30, 0x39	; 57
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <Dio_Read+0x3e>
    119e:	55 95       	asr	r21
    11a0:	47 95       	ror	r20
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <Dio_Read+0x3a>
    11a6:	ca 01       	movw	r24, r20
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	8b 83       	std	Y+3, r24	; 0x03
    11ac:	3e c0       	rjmp	.+124    	; 0x122a <Dio_Read+0xc6>
	}
	else if(port == PORT_B)
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	91 f4       	brne	.+36     	; 0x11d8 <Dio_Read+0x74>
	{
		state = READ_BIT(PINB,pin);
    11b4:	e6 e3       	ldi	r30, 0x36	; 54
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a9 01       	movw	r20, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <Dio_Read+0x68>
    11c8:	55 95       	asr	r21
    11ca:	47 95       	ror	r20
    11cc:	8a 95       	dec	r24
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <Dio_Read+0x64>
    11d0:	ca 01       	movw	r24, r20
    11d2:	81 70       	andi	r24, 0x01	; 1
    11d4:	8b 83       	std	Y+3, r24	; 0x03
    11d6:	29 c0       	rjmp	.+82     	; 0x122a <Dio_Read+0xc6>
	}
	else if(port == PORT_C)
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	91 f4       	brne	.+36     	; 0x1202 <Dio_Read+0x9e>
	{
		state = READ_BIT(PINC,pin);
    11de:	e3 e3       	ldi	r30, 0x33	; 51
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <Dio_Read+0x92>
    11f2:	55 95       	asr	r21
    11f4:	47 95       	ror	r20
    11f6:	8a 95       	dec	r24
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <Dio_Read+0x8e>
    11fa:	ca 01       	movw	r24, r20
    11fc:	81 70       	andi	r24, 0x01	; 1
    11fe:	8b 83       	std	Y+3, r24	; 0x03
    1200:	14 c0       	rjmp	.+40     	; 0x122a <Dio_Read+0xc6>
	}
	else if(port == PORT_D)
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	89 f4       	brne	.+34     	; 0x122a <Dio_Read+0xc6>
	{
		state = READ_BIT(PIND,pin);
    1208:	e0 e3       	ldi	r30, 0x30	; 48
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <Dio_Read+0xbc>
    121c:	55 95       	asr	r21
    121e:	47 95       	ror	r20
    1220:	8a 95       	dec	r24
    1222:	e2 f7       	brpl	.-8      	; 0x121c <Dio_Read+0xb8>
    1224:	ca 01       	movw	r24, r20
    1226:	81 70       	andi	r24, 0x01	; 1
    1228:	8b 83       	std	Y+3, r24	; 0x03
	}

	return state;
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <GetPressed>:
                                                                        {1, 2, 3, '-'},
                                                                        {'&',  0, '=', '+'}
                                                       };

u8 GetPressed()
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	63 97       	sbiw	r28, 0x13	; 19
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
	u8 Rows =0;
    124e:	1b 8a       	std	Y+19, r1	; 0x13
	u8 Cols =0;
    1250:	1a 8a       	std	Y+18, r1	; 0x12
	u8 PortCounter =0;
    1252:	19 8a       	std	Y+17, r1	; 0x11
	Dio_state_t state=LOW;
    1254:	18 8a       	std	Y+16, r1	; 0x10
	u8 PressedButton=0;
    1256:	1f 86       	std	Y+15, r1	; 0x0f
	for(Rows =0;Rows<keypad_rows;Rows++)
    1258:	1b 8a       	std	Y+19, r1	; 0x13
    125a:	ab c0       	rjmp	.+342    	; 0x13b2 <GetPressed+0x178>
	{
		for(PortCounter=keypad_R1;PortCounter<keypad_R1+keypad_rows;PortCounter++)
    125c:	80 e1       	ldi	r24, 0x10	; 16
    125e:	89 8b       	std	Y+17, r24	; 0x11
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <GetPressed+0x36>
		{
			Dio_Write(PortCounter,LOW);  //to set as output
    1262:	89 89       	ldd	r24, Y+17	; 0x11
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	u8 PortCounter =0;
	Dio_state_t state=LOW;
	u8 PressedButton=0;
	for(Rows =0;Rows<keypad_rows;Rows++)
	{
		for(PortCounter=keypad_R1;PortCounter<keypad_R1+keypad_rows;PortCounter++)
    126a:	89 89       	ldd	r24, Y+17	; 0x11
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	89 8b       	std	Y+17, r24	; 0x11
    1270:	89 89       	ldd	r24, Y+17	; 0x11
    1272:	84 31       	cpi	r24, 0x14	; 20
    1274:	b0 f3       	brcs	.-20     	; 0x1262 <GetPressed+0x28>
		{
			Dio_Write(PortCounter,LOW);  //to set as output
		}
		Dio_Write(Rows + keypad_R1, HIGH);
    1276:	8b 89       	ldd	r24, Y+19	; 0x13
    1278:	80 5f       	subi	r24, 0xF0	; 240
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a0 e2       	ldi	r26, 0x20	; 32
    1286:	b1 e4       	ldi	r27, 0x41	; 65
    1288:	8b 87       	std	Y+11, r24	; 0x0b
    128a:	9c 87       	std	Y+12, r25	; 0x0c
    128c:	ad 87       	std	Y+13, r26	; 0x0d
    128e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1290:	6b 85       	ldd	r22, Y+11	; 0x0b
    1292:	7c 85       	ldd	r23, Y+12	; 0x0c
    1294:	8d 85       	ldd	r24, Y+13	; 0x0d
    1296:	9e 85       	ldd	r25, Y+14	; 0x0e
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	4a ef       	ldi	r20, 0xFA	; 250
    129e:	54 e4       	ldi	r21, 0x44	; 68
    12a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	8f 83       	std	Y+7, r24	; 0x07
    12aa:	98 87       	std	Y+8, r25	; 0x08
    12ac:	a9 87       	std	Y+9, r26	; 0x09
    12ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b0:	6f 81       	ldd	r22, Y+7	; 0x07
    12b2:	78 85       	ldd	r23, Y+8	; 0x08
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e8       	ldi	r20, 0x80	; 128
    12be:	5f e3       	ldi	r21, 0x3F	; 63
    12c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12c4:	88 23       	and	r24, r24
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <GetPressed+0x98>
		__ticks = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
    12d0:	3f c0       	rjmp	.+126    	; 0x1350 <GetPressed+0x116>
	else if (__tmp > 65535)
    12d2:	6f 81       	ldd	r22, Y+7	; 0x07
    12d4:	78 85       	ldd	r23, Y+8	; 0x08
    12d6:	89 85       	ldd	r24, Y+9	; 0x09
    12d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	3f ef       	ldi	r19, 0xFF	; 255
    12de:	4f e7       	ldi	r20, 0x7F	; 127
    12e0:	57 e4       	ldi	r21, 0x47	; 71
    12e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12e6:	18 16       	cp	r1, r24
    12e8:	4c f5       	brge	.+82     	; 0x133c <GetPressed+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e2       	ldi	r20, 0x20	; 32
    12f8:	51 e4       	ldi	r21, 0x41	; 65
    12fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	0f c0       	rjmp	.+30     	; 0x1332 <GetPressed+0xf8>
    1314:	88 ec       	ldi	r24, 0xC8	; 200
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <GetPressed+0xe6>
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	69 f7       	brne	.-38     	; 0x1314 <GetPressed+0xda>
    133a:	14 c0       	rjmp	.+40     	; 0x1364 <GetPressed+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133c:	6f 81       	ldd	r22, Y+7	; 0x07
    133e:	78 85       	ldd	r23, Y+8	; 0x08
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	9e 83       	std	Y+6, r25	; 0x06
    134e:	8d 83       	std	Y+5, r24	; 0x05
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <GetPressed+0x122>
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		for(Cols=0;Cols<keypad_C1+keypad_cols;Cols++)
    1364:	1a 8a       	std	Y+18, r1	; 0x12
    1366:	1f c0       	rjmp	.+62     	; 0x13a6 <GetPressed+0x16c>
		{
			state = Dio_Read(Cols);
    1368:	8a 89       	ldd	r24, Y+18	; 0x12
    136a:	0e 94 b2 08 	call	0x1164	; 0x1164 <Dio_Read>
    136e:	88 8b       	std	Y+16, r24	; 0x10
			if (state == HIGH)
    1370:	88 89       	ldd	r24, Y+16	; 0x10
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	a9 f4       	brne	.+42     	; 0x13a0 <GetPressed+0x166>
			{
				PressedButton = Calcolator[Rows][Cols-keypad_C1];
    1376:	8b 89       	ldd	r24, Y+19	; 0x13
    1378:	48 2f       	mov	r20, r24
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	8a 89       	ldd	r24, Y+18	; 0x12
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9c 01       	movw	r18, r24
    1384:	24 51       	subi	r18, 0x14	; 20
    1386:	30 40       	sbci	r19, 0x00	; 0
    1388:	ca 01       	movw	r24, r20
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	82 0f       	add	r24, r18
    1394:	93 1f       	adc	r25, r19
    1396:	fc 01       	movw	r30, r24
    1398:	e3 51       	subi	r30, 0x13	; 19
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 81       	ld	r24, Z
    139e:	8f 87       	std	Y+15, r24	; 0x0f
		{
			Dio_Write(PortCounter,LOW);  //to set as output
		}
		Dio_Write(Rows + keypad_R1, HIGH);
		_delay_ms(10);
		for(Cols=0;Cols<keypad_C1+keypad_cols;Cols++)
    13a0:	8a 89       	ldd	r24, Y+18	; 0x12
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	8a 8b       	std	Y+18, r24	; 0x12
    13a6:	8a 89       	ldd	r24, Y+18	; 0x12
    13a8:	88 31       	cpi	r24, 0x18	; 24
    13aa:	f0 f2       	brcs	.-68     	; 0x1368 <GetPressed+0x12e>
	u8 Rows =0;
	u8 Cols =0;
	u8 PortCounter =0;
	Dio_state_t state=LOW;
	u8 PressedButton=0;
	for(Rows =0;Rows<keypad_rows;Rows++)
    13ac:	8b 89       	ldd	r24, Y+19	; 0x13
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	8b 8b       	std	Y+19, r24	; 0x13
    13b2:	8b 89       	ldd	r24, Y+19	; 0x13
    13b4:	84 30       	cpi	r24, 0x04	; 4
    13b6:	08 f4       	brcc	.+2      	; 0x13ba <GetPressed+0x180>
    13b8:	51 cf       	rjmp	.-350    	; 0x125c <GetPressed+0x22>
			{
				PressedButton = Calcolator[Rows][Cols-keypad_C1];
			}
		}
	}
	return PressedButton;
    13ba:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    13bc:	63 96       	adiw	r28, 0x13	; 19
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <LCD_Init>:
#include "CLCD_interface.h"

static void Trigger_Enable();
static void Set_Cursor_Pos(u8 row,u8 column);
void LCD_Init(void)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	2e 97       	sbiw	r28, 0x0e	; 14
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	a0 ea       	ldi	r26, 0xA0	; 160
    13e8:	b1 e4       	ldi	r27, 0x41	; 65
    13ea:	8b 87       	std	Y+11, r24	; 0x0b
    13ec:	9c 87       	std	Y+12, r25	; 0x0c
    13ee:	ad 87       	std	Y+13, r26	; 0x0d
    13f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	4a ef       	ldi	r20, 0xFA	; 250
    1400:	54 e4       	ldi	r21, 0x44	; 68
    1402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	8f 83       	std	Y+7, r24	; 0x07
    140c:	98 87       	std	Y+8, r25	; 0x08
    140e:	a9 87       	std	Y+9, r26	; 0x09
    1410:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1412:	6f 81       	ldd	r22, Y+7	; 0x07
    1414:	78 85       	ldd	r23, Y+8	; 0x08
    1416:	89 85       	ldd	r24, Y+9	; 0x09
    1418:	9a 85       	ldd	r25, Y+10	; 0x0a
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e8       	ldi	r20, 0x80	; 128
    1420:	5f e3       	ldi	r21, 0x3F	; 63
    1422:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1426:	88 23       	and	r24, r24
    1428:	2c f4       	brge	.+10     	; 0x1434 <LCD_Init+0x66>
		__ticks = 1;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	3f c0       	rjmp	.+126    	; 0x14b2 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    1434:	6f 81       	ldd	r22, Y+7	; 0x07
    1436:	78 85       	ldd	r23, Y+8	; 0x08
    1438:	89 85       	ldd	r24, Y+9	; 0x09
    143a:	9a 85       	ldd	r25, Y+10	; 0x0a
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	3f ef       	ldi	r19, 0xFF	; 255
    1440:	4f e7       	ldi	r20, 0x7F	; 127
    1442:	57 e4       	ldi	r21, 0x47	; 71
    1444:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1448:	18 16       	cp	r1, r24
    144a:	4c f5       	brge	.+82     	; 0x149e <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144c:	6b 85       	ldd	r22, Y+11	; 0x0b
    144e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1450:	8d 85       	ldd	r24, Y+13	; 0x0d
    1452:	9e 85       	ldd	r25, Y+14	; 0x0e
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e2       	ldi	r20, 0x20	; 32
    145a:	51 e4       	ldi	r21, 0x41	; 65
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
    1474:	0f c0       	rjmp	.+30     	; 0x1494 <LCD_Init+0xc6>
    1476:	88 ec       	ldi	r24, 0xC8	; 200
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	9c 83       	std	Y+4, r25	; 0x04
    147c:	8b 83       	std	Y+3, r24	; 0x03
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <LCD_Init+0xb4>
    1486:	9c 83       	std	Y+4, r25	; 0x04
    1488:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	69 f7       	brne	.-38     	; 0x1476 <LCD_Init+0xa8>
    149c:	14 c0       	rjmp	.+40     	; 0x14c6 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149e:	6f 81       	ldd	r22, Y+7	; 0x07
    14a0:	78 85       	ldd	r23, Y+8	; 0x08
    14a2:	89 85       	ldd	r24, Y+9	; 0x09
    14a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	9e 83       	std	Y+6, r25	; 0x06
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <LCD_Init+0xf0>
    14c2:	9a 83       	std	Y+2, r25	; 0x02
    14c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_Send_Command(0x33);
    14c6:	83 e3       	ldi	r24, 0x33	; 51
    14c8:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
	LCD_Send_Command(0x32);
    14cc:	82 e3       	ldi	r24, 0x32	; 50
    14ce:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
	LCD_Send_Command(FOUR_BITS);
    14d2:	88 e2       	ldi	r24, 0x28	; 40
    14d4:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
	LCD_Send_Command(lcd_DisplayOn_CursorOn);
    14d8:	8e e0       	ldi	r24, 0x0E	; 14
    14da:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
	LCD_Send_Command(lcd_EntryMode);
    14de:	86 e0       	ldi	r24, 0x06	; 6
    14e0:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
	LCD_Send_Command(_LCD_DDRAM_START);
    14e4:	80 e8       	ldi	r24, 0x80	; 128
    14e6:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
	LCD_Send_Command(lcd_clear);
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
}
    14f0:	2e 96       	adiw	r28, 0x0e	; 14
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <LCD_Send_Command>:
void LCD_Send_Command(u8 command)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	89 83       	std	Y+1, r24	; 0x01
	Dio_Write(RS, LOW);
    150e:	88 e0       	ldi	r24, 0x08	; 8
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	Dio_Write(RW, LOW);
    1516:	89 e0       	ldi	r24, 0x09	; 9
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>

	(READ_BIT(command,7)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	88 23       	and	r24, r24
    1522:	2c f4       	brge	.+10     	; 0x152e <LCD_Send_Command+0x2c>
    1524:	87 e0       	ldi	r24, 0x07	; 7
    1526:	61 e0       	ldi	r22, 0x01	; 1
    1528:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <LCD_Send_Command+0x34>
    152e:	87 e0       	ldi	r24, 0x07	; 7
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(command,6)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	82 95       	swap	r24
    153a:	86 95       	lsr	r24
    153c:	86 95       	lsr	r24
    153e:	83 70       	andi	r24, 0x03	; 3
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	81 70       	andi	r24, 0x01	; 1
    1546:	90 70       	andi	r25, 0x00	; 0
    1548:	88 23       	and	r24, r24
    154a:	29 f0       	breq	.+10     	; 0x1556 <LCD_Send_Command+0x54>
    154c:	86 e0       	ldi	r24, 0x06	; 6
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    1554:	04 c0       	rjmp	.+8      	; 0x155e <LCD_Send_Command+0x5c>
    1556:	86 e0       	ldi	r24, 0x06	; 6
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(command,5)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	82 95       	swap	r24
    1562:	86 95       	lsr	r24
    1564:	87 70       	andi	r24, 0x07	; 7
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	81 70       	andi	r24, 0x01	; 1
    156c:	90 70       	andi	r25, 0x00	; 0
    156e:	88 23       	and	r24, r24
    1570:	29 f0       	breq	.+10     	; 0x157c <LCD_Send_Command+0x7a>
    1572:	85 e0       	ldi	r24, 0x05	; 5
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    157a:	04 c0       	rjmp	.+8      	; 0x1584 <LCD_Send_Command+0x82>
    157c:	85 e0       	ldi	r24, 0x05	; 5
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(command,4)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	82 95       	swap	r24
    1588:	8f 70       	andi	r24, 0x0F	; 15
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	81 70       	andi	r24, 0x01	; 1
    1590:	90 70       	andi	r25, 0x00	; 0
    1592:	88 23       	and	r24, r24
    1594:	29 f0       	breq	.+10     	; 0x15a0 <LCD_Send_Command+0x9e>
    1596:	84 e0       	ldi	r24, 0x04	; 4
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <LCD_Send_Command+0xa6>
    15a0:	84 e0       	ldi	r24, 0x04	; 4
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    15a8:	0e 94 a7 0c 	call	0x194e	; 0x194e <Trigger_Enable>
	(READ_BIT(command,3)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	86 95       	lsr	r24
    15b0:	86 95       	lsr	r24
    15b2:	86 95       	lsr	r24
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	81 70       	andi	r24, 0x01	; 1
    15ba:	90 70       	andi	r25, 0x00	; 0
    15bc:	88 23       	and	r24, r24
    15be:	29 f0       	breq	.+10     	; 0x15ca <LCD_Send_Command+0xc8>
    15c0:	87 e0       	ldi	r24, 0x07	; 7
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <LCD_Send_Command+0xd0>
    15ca:	87 e0       	ldi	r24, 0x07	; 7
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(command,2)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	86 95       	lsr	r24
    15d6:	86 95       	lsr	r24
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	81 70       	andi	r24, 0x01	; 1
    15de:	90 70       	andi	r25, 0x00	; 0
    15e0:	88 23       	and	r24, r24
    15e2:	29 f0       	breq	.+10     	; 0x15ee <LCD_Send_Command+0xec>
    15e4:	86 e0       	ldi	r24, 0x06	; 6
    15e6:	61 e0       	ldi	r22, 0x01	; 1
    15e8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <LCD_Send_Command+0xf4>
    15ee:	86 e0       	ldi	r24, 0x06	; 6
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(command,1)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	86 95       	lsr	r24
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	81 70       	andi	r24, 0x01	; 1
    1600:	90 70       	andi	r25, 0x00	; 0
    1602:	88 23       	and	r24, r24
    1604:	29 f0       	breq	.+10     	; 0x1610 <LCD_Send_Command+0x10e>
    1606:	85 e0       	ldi	r24, 0x05	; 5
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <LCD_Send_Command+0x116>
    1610:	85 e0       	ldi	r24, 0x05	; 5
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(command,0)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	81 70       	andi	r24, 0x01	; 1
    1620:	90 70       	andi	r25, 0x00	; 0
    1622:	88 23       	and	r24, r24
    1624:	29 f0       	breq	.+10     	; 0x1630 <LCD_Send_Command+0x12e>
    1626:	84 e0       	ldi	r24, 0x04	; 4
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    162e:	04 c0       	rjmp	.+8      	; 0x1638 <LCD_Send_Command+0x136>
    1630:	84 e0       	ldi	r24, 0x04	; 4
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    1638:	0e 94 a7 0c 	call	0x194e	; 0x194e <Trigger_Enable>
}
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <LCD_Send_Char>:
void LCD_Send_Char(u8 _char)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	0f 92       	push	r0
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	89 83       	std	Y+1, r24	; 0x01
	Dio_Write(RS, HIGH);
    1650:	88 e0       	ldi	r24, 0x08	; 8
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	Dio_Write(RW, LOW);
    1658:	89 e0       	ldi	r24, 0x09	; 9
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>

	(READ_BIT(_char,7)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	88 23       	and	r24, r24
    1664:	2c f4       	brge	.+10     	; 0x1670 <LCD_Send_Char+0x2c>
    1666:	87 e0       	ldi	r24, 0x07	; 7
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <LCD_Send_Char+0x34>
    1670:	87 e0       	ldi	r24, 0x07	; 7
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(_char,6)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	82 95       	swap	r24
    167c:	86 95       	lsr	r24
    167e:	86 95       	lsr	r24
    1680:	83 70       	andi	r24, 0x03	; 3
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	81 70       	andi	r24, 0x01	; 1
    1688:	90 70       	andi	r25, 0x00	; 0
    168a:	88 23       	and	r24, r24
    168c:	29 f0       	breq	.+10     	; 0x1698 <LCD_Send_Char+0x54>
    168e:	86 e0       	ldi	r24, 0x06	; 6
    1690:	61 e0       	ldi	r22, 0x01	; 1
    1692:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <LCD_Send_Char+0x5c>
    1698:	86 e0       	ldi	r24, 0x06	; 6
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(_char,5)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	82 95       	swap	r24
    16a4:	86 95       	lsr	r24
    16a6:	87 70       	andi	r24, 0x07	; 7
    16a8:	88 2f       	mov	r24, r24
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	81 70       	andi	r24, 0x01	; 1
    16ae:	90 70       	andi	r25, 0x00	; 0
    16b0:	88 23       	and	r24, r24
    16b2:	29 f0       	breq	.+10     	; 0x16be <LCD_Send_Char+0x7a>
    16b4:	85 e0       	ldi	r24, 0x05	; 5
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <LCD_Send_Char+0x82>
    16be:	85 e0       	ldi	r24, 0x05	; 5
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(_char,4)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	82 95       	swap	r24
    16ca:	8f 70       	andi	r24, 0x0F	; 15
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	81 70       	andi	r24, 0x01	; 1
    16d2:	90 70       	andi	r25, 0x00	; 0
    16d4:	88 23       	and	r24, r24
    16d6:	29 f0       	breq	.+10     	; 0x16e2 <LCD_Send_Char+0x9e>
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <LCD_Send_Char+0xa6>
    16e2:	84 e0       	ldi	r24, 0x04	; 4
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    16ea:	0e 94 a7 0c 	call	0x194e	; 0x194e <Trigger_Enable>
	(READ_BIT(_char,3)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	86 95       	lsr	r24
    16f2:	86 95       	lsr	r24
    16f4:	86 95       	lsr	r24
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	81 70       	andi	r24, 0x01	; 1
    16fc:	90 70       	andi	r25, 0x00	; 0
    16fe:	88 23       	and	r24, r24
    1700:	29 f0       	breq	.+10     	; 0x170c <LCD_Send_Char+0xc8>
    1702:	87 e0       	ldi	r24, 0x07	; 7
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <LCD_Send_Char+0xd0>
    170c:	87 e0       	ldi	r24, 0x07	; 7
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(_char,2)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	86 95       	lsr	r24
    1718:	86 95       	lsr	r24
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	81 70       	andi	r24, 0x01	; 1
    1720:	90 70       	andi	r25, 0x00	; 0
    1722:	88 23       	and	r24, r24
    1724:	29 f0       	breq	.+10     	; 0x1730 <LCD_Send_Char+0xec>
    1726:	86 e0       	ldi	r24, 0x06	; 6
    1728:	61 e0       	ldi	r22, 0x01	; 1
    172a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <LCD_Send_Char+0xf4>
    1730:	86 e0       	ldi	r24, 0x06	; 6
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(_char,1)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	86 95       	lsr	r24
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	81 70       	andi	r24, 0x01	; 1
    1742:	90 70       	andi	r25, 0x00	; 0
    1744:	88 23       	and	r24, r24
    1746:	29 f0       	breq	.+10     	; 0x1752 <LCD_Send_Char+0x10e>
    1748:	85 e0       	ldi	r24, 0x05	; 5
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    1750:	04 c0       	rjmp	.+8      	; 0x175a <LCD_Send_Char+0x116>
    1752:	85 e0       	ldi	r24, 0x05	; 5
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	(READ_BIT(_char,0)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	90 70       	andi	r25, 0x00	; 0
    1764:	88 23       	and	r24, r24
    1766:	29 f0       	breq	.+10     	; 0x1772 <LCD_Send_Char+0x12e>
    1768:	84 e0       	ldi	r24, 0x04	; 4
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    1770:	04 c0       	rjmp	.+8      	; 0x177a <LCD_Send_Char+0x136>
    1772:	84 e0       	ldi	r24, 0x04	; 4
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    177a:	0e 94 a7 0c 	call	0x194e	; 0x194e <Trigger_Enable>
}
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <LCD_Send_Char_Pos>:
void LCD_Send_Char_Pos(u8 _char,u8 row,u8 column)
{
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <LCD_Send_Char_Pos+0x6>
    178c:	0f 92       	push	r0
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	6a 83       	std	Y+2, r22	; 0x02
    1796:	4b 83       	std	Y+3, r20	; 0x03
	Set_Cursor_Pos(row,column);
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	6b 81       	ldd	r22, Y+3	; 0x03
    179c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <Set_Cursor_Pos>
	LCD_Send_Char(_char);
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_Send_Char>
}
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <LCD_Send_String>:
void LCD_Send_String(u8 *string)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <LCD_Send_String+0x6>
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	9a 83       	std	Y+2, r25	; 0x02
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	0b c0       	rjmp	.+22     	; 0x17d8 <LCD_Send_String+0x26>
	while(*string !='\0')
	{
		LCD_Send_Char(*string++);
    17c2:	e9 81       	ldd	r30, Y+1	; 0x01
    17c4:	fa 81       	ldd	r31, Y+2	; 0x02
    17c6:	20 81       	ld	r18, Z
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	82 2f       	mov	r24, r18
    17d4:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_Send_Char>
	Set_Cursor_Pos(row,column);
	LCD_Send_Char(_char);
}
void LCD_Send_String(u8 *string)
{
	while(*string !='\0')
    17d8:	e9 81       	ldd	r30, Y+1	; 0x01
    17da:	fa 81       	ldd	r31, Y+2	; 0x02
    17dc:	80 81       	ld	r24, Z
    17de:	88 23       	and	r24, r24
    17e0:	81 f7       	brne	.-32     	; 0x17c2 <LCD_Send_String+0x10>
	{
		LCD_Send_Char(*string++);
	}
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <LCD_Send_String_Pos>:
void LCD_Send_String_Pos(u8 *string,u8 row,u8 column)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <LCD_Send_String_Pos+0x6>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <LCD_Send_String_Pos+0x8>
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	6b 83       	std	Y+3, r22	; 0x03
    17fe:	4c 83       	std	Y+4, r20	; 0x04
	Set_Cursor_Pos(row,column);
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	6c 81       	ldd	r22, Y+4	; 0x04
    1804:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <Set_Cursor_Pos>
	LCD_Send_String(string);
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <LCD_Send_String>
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <LCD_Send_Number>:

void LCD_Send_Number(u32 num)
{
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	60 97       	sbiw	r28, 0x10	; 16
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	6d 87       	std	Y+13, r22	; 0x0d
    1838:	7e 87       	std	Y+14, r23	; 0x0e
    183a:	8f 87       	std	Y+15, r24	; 0x0f
    183c:	98 8b       	std	Y+16, r25	; 0x10
	 u8 arr[10],i=0,j=0;
    183e:	1a 82       	std	Y+2, r1	; 0x02
    1840:	19 82       	std	Y+1, r1	; 0x01
		   if(num == 0)
    1842:	8d 85       	ldd	r24, Y+13	; 0x0d
    1844:	9e 85       	ldd	r25, Y+14	; 0x0e
    1846:	af 85       	ldd	r26, Y+15	; 0x0f
    1848:	b8 89       	ldd	r27, Y+16	; 0x10
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	a1 05       	cpc	r26, r1
    184e:	b1 05       	cpc	r27, r1
    1850:	91 f5       	brne	.+100    	; 0x18b6 <LCD_Send_Number+0x98>
		   {
			   LCD_Send_Char('0');
    1852:	80 e3       	ldi	r24, 0x30	; 48
    1854:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_Send_Char>
    1858:	4d c0       	rjmp	.+154    	; 0x18f4 <LCD_Send_Number+0xd6>
		   }
		   else
		   {
			   while(num)
			   {
					arr[i]=num%10+'0';
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	08 2f       	mov	r16, r24
    185e:	10 e0       	ldi	r17, 0x00	; 0
    1860:	8d 85       	ldd	r24, Y+13	; 0x0d
    1862:	9e 85       	ldd	r25, Y+14	; 0x0e
    1864:	af 85       	ldd	r26, Y+15	; 0x0f
    1866:	b8 89       	ldd	r27, Y+16	; 0x10
    1868:	2a e0       	ldi	r18, 0x0A	; 10
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 b9 18 	call	0x3172	; 0x3172 <__udivmodsi4>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	28 2f       	mov	r18, r24
    187e:	20 5d       	subi	r18, 0xD0	; 208
    1880:	ce 01       	movw	r24, r28
    1882:	03 96       	adiw	r24, 0x03	; 3
    1884:	fc 01       	movw	r30, r24
    1886:	e0 0f       	add	r30, r16
    1888:	f1 1f       	adc	r31, r17
    188a:	20 83       	st	Z, r18
					num/=10;
    188c:	8d 85       	ldd	r24, Y+13	; 0x0d
    188e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1890:	af 85       	ldd	r26, Y+15	; 0x0f
    1892:	b8 89       	ldd	r27, Y+16	; 0x10
    1894:	2a e0       	ldi	r18, 0x0A	; 10
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 b9 18 	call	0x3172	; 0x3172 <__udivmodsi4>
    18a4:	da 01       	movw	r26, r20
    18a6:	c9 01       	movw	r24, r18
    18a8:	8d 87       	std	Y+13, r24	; 0x0d
    18aa:	9e 87       	std	Y+14, r25	; 0x0e
    18ac:	af 87       	std	Y+15, r26	; 0x0f
    18ae:	b8 8b       	std	Y+16, r27	; 0x10
					i++;
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	8a 83       	std	Y+2, r24	; 0x02
		   {
			   LCD_Send_Char('0');
		   }
		   else
		   {
			   while(num)
    18b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ba:	af 85       	ldd	r26, Y+15	; 0x0f
    18bc:	b8 89       	ldd	r27, Y+16	; 0x10
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	a1 05       	cpc	r26, r1
    18c2:	b1 05       	cpc	r27, r1
    18c4:	51 f6       	brne	.-108    	; 0x185a <LCD_Send_Number+0x3c>
			   {
					arr[i]=num%10+'0';
					num/=10;
					i++;
			   }
			   for(j=i;j>0;j--)
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	11 c0       	rjmp	.+34     	; 0x18ee <LCD_Send_Number+0xd0>
			   {
				   LCD_Send_Char(arr[j-1]);
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9c 01       	movw	r18, r24
    18d4:	21 50       	subi	r18, 0x01	; 1
    18d6:	30 40       	sbci	r19, 0x00	; 0
    18d8:	ce 01       	movw	r24, r28
    18da:	03 96       	adiw	r24, 0x03	; 3
    18dc:	fc 01       	movw	r30, r24
    18de:	e2 0f       	add	r30, r18
    18e0:	f3 1f       	adc	r31, r19
    18e2:	80 81       	ld	r24, Z
    18e4:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_Send_Char>
			   {
					arr[i]=num%10+'0';
					num/=10;
					i++;
			   }
			   for(j=i;j>0;j--)
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	81 50       	subi	r24, 0x01	; 1
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	88 23       	and	r24, r24
    18f2:	61 f7       	brne	.-40     	; 0x18cc <LCD_Send_Number+0xae>
			   {
				   LCD_Send_Char(arr[j-1]);
			   }
		   }
}
    18f4:	60 96       	adiw	r28, 0x10	; 16
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	08 95       	ret

0000190a <LCD_Send_Number_Pos>:
void LCD_Send_Number_Pos(u32 num,u8 row,u8 column)
{
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	00 d0       	rcall	.+0      	; 0x1910 <LCD_Send_Number_Pos+0x6>
    1910:	00 d0       	rcall	.+0      	; 0x1912 <LCD_Send_Number_Pos+0x8>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <LCD_Send_Number_Pos+0xa>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	69 83       	std	Y+1, r22	; 0x01
    191a:	7a 83       	std	Y+2, r23	; 0x02
    191c:	8b 83       	std	Y+3, r24	; 0x03
    191e:	9c 83       	std	Y+4, r25	; 0x04
    1920:	4d 83       	std	Y+5, r20	; 0x05
    1922:	2e 83       	std	Y+6, r18	; 0x06
	Set_Cursor_Pos(row,column);
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	6e 81       	ldd	r22, Y+6	; 0x06
    1928:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <Set_Cursor_Pos>
	LCD_Send_Number(num);
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	9a 81       	ldd	r25, Y+2	; 0x02
    1930:	ab 81       	ldd	r26, Y+3	; 0x03
    1932:	bc 81       	ldd	r27, Y+4	; 0x04
    1934:	bc 01       	movw	r22, r24
    1936:	cd 01       	movw	r24, r26
    1938:	0e 94 0f 0c 	call	0x181e	; 0x181e <LCD_Send_Number>
}
    193c:	26 96       	adiw	r28, 0x06	; 6
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <Trigger_Enable>:

static void Trigger_Enable()
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	e0 97       	sbiw	r28, 0x30	; 48
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
	Dio_Write(EN,HIGH);
    1962:	8a e0       	ldi	r24, 0x0A	; 10
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a0 e2       	ldi	r26, 0x20	; 32
    1970:	b1 e4       	ldi	r27, 0x41	; 65
    1972:	8d a7       	std	Y+45, r24	; 0x2d
    1974:	9e a7       	std	Y+46, r25	; 0x2e
    1976:	af a7       	std	Y+47, r26	; 0x2f
    1978:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    197a:	6d a5       	ldd	r22, Y+45	; 0x2d
    197c:	7e a5       	ldd	r23, Y+46	; 0x2e
    197e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1980:	98 a9       	ldd	r25, Y+48	; 0x30
    1982:	2b ea       	ldi	r18, 0xAB	; 171
    1984:	3a ea       	ldi	r19, 0xAA	; 170
    1986:	4a e2       	ldi	r20, 0x2A	; 42
    1988:	50 e4       	ldi	r21, 0x40	; 64
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	89 a7       	std	Y+41, r24	; 0x29
    1994:	9a a7       	std	Y+42, r25	; 0x2a
    1996:	ab a7       	std	Y+43, r26	; 0x2b
    1998:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    199a:	69 a5       	ldd	r22, Y+41	; 0x29
    199c:	7a a5       	ldd	r23, Y+42	; 0x2a
    199e:	8b a5       	ldd	r24, Y+43	; 0x2b
    19a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	1c f4       	brge	.+6      	; 0x19b8 <Trigger_Enable+0x6a>
		__ticks = 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	88 a7       	std	Y+40, r24	; 0x28
    19b6:	91 c0       	rjmp	.+290    	; 0x1ada <Trigger_Enable+0x18c>
	else if (__tmp > 255)
    19b8:	69 a5       	ldd	r22, Y+41	; 0x29
    19ba:	7a a5       	ldd	r23, Y+42	; 0x2a
    19bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    19be:	9c a5       	ldd	r25, Y+44	; 0x2c
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	53 e4       	ldi	r21, 0x43	; 67
    19c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	0c f0       	brlt	.+2      	; 0x19d2 <Trigger_Enable+0x84>
    19d0:	7b c0       	rjmp	.+246    	; 0x1ac8 <Trigger_Enable+0x17a>
	{
		_delay_ms(__us / 1000.0);
    19d2:	6d a5       	ldd	r22, Y+45	; 0x2d
    19d4:	7e a5       	ldd	r23, Y+46	; 0x2e
    19d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d8:	98 a9       	ldd	r25, Y+48	; 0x30
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a e7       	ldi	r20, 0x7A	; 122
    19e0:	54 e4       	ldi	r21, 0x44	; 68
    19e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8c a3       	std	Y+36, r24	; 0x24
    19ec:	9d a3       	std	Y+37, r25	; 0x25
    19ee:	ae a3       	std	Y+38, r26	; 0x26
    19f0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f2:	6c a1       	ldd	r22, Y+36	; 0x24
    19f4:	7d a1       	ldd	r23, Y+37	; 0x25
    19f6:	8e a1       	ldd	r24, Y+38	; 0x26
    19f8:	9f a1       	ldd	r25, Y+39	; 0x27
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a ef       	ldi	r20, 0xFA	; 250
    1a00:	54 e4       	ldi	r21, 0x44	; 68
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	88 a3       	std	Y+32, r24	; 0x20
    1a0c:	99 a3       	std	Y+33, r25	; 0x21
    1a0e:	aa a3       	std	Y+34, r26	; 0x22
    1a10:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1a12:	68 a1       	ldd	r22, Y+32	; 0x20
    1a14:	79 a1       	ldd	r23, Y+33	; 0x21
    1a16:	8a a1       	ldd	r24, Y+34	; 0x22
    1a18:	9b a1       	ldd	r25, Y+35	; 0x23
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e8       	ldi	r20, 0x80	; 128
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <Trigger_Enable+0xe6>
		__ticks = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9f 8f       	std	Y+31, r25	; 0x1f
    1a30:	8e 8f       	std	Y+30, r24	; 0x1e
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <Trigger_Enable+0x164>
	else if (__tmp > 65535)
    1a34:	68 a1       	ldd	r22, Y+32	; 0x20
    1a36:	79 a1       	ldd	r23, Y+33	; 0x21
    1a38:	8a a1       	ldd	r24, Y+34	; 0x22
    1a3a:	9b a1       	ldd	r25, Y+35	; 0x23
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	3f ef       	ldi	r19, 0xFF	; 255
    1a40:	4f e7       	ldi	r20, 0x7F	; 127
    1a42:	57 e4       	ldi	r21, 0x47	; 71
    1a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a48:	18 16       	cp	r1, r24
    1a4a:	4c f5       	brge	.+82     	; 0x1a9e <Trigger_Enable+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4c:	6c a1       	ldd	r22, Y+36	; 0x24
    1a4e:	7d a1       	ldd	r23, Y+37	; 0x25
    1a50:	8e a1       	ldd	r24, Y+38	; 0x26
    1a52:	9f a1       	ldd	r25, Y+39	; 0x27
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e2       	ldi	r20, 0x20	; 32
    1a5a:	51 e4       	ldi	r21, 0x41	; 65
    1a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9f 8f       	std	Y+31, r25	; 0x1f
    1a72:	8e 8f       	std	Y+30, r24	; 0x1e
    1a74:	0f c0       	rjmp	.+30     	; 0x1a94 <Trigger_Enable+0x146>
    1a76:	88 ec       	ldi	r24, 0xC8	; 200
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9d 8f       	std	Y+29, r25	; 0x1d
    1a7c:	8c 8f       	std	Y+28, r24	; 0x1c
    1a7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <Trigger_Enable+0x134>
    1a86:	9d 8f       	std	Y+29, r25	; 0x1d
    1a88:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a8c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	9f 8f       	std	Y+31, r25	; 0x1f
    1a92:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a96:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	69 f7       	brne	.-38     	; 0x1a76 <Trigger_Enable+0x128>
    1a9c:	24 c0       	rjmp	.+72     	; 0x1ae6 <Trigger_Enable+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9e:	68 a1       	ldd	r22, Y+32	; 0x20
    1aa0:	79 a1       	ldd	r23, Y+33	; 0x21
    1aa2:	8a a1       	ldd	r24, Y+34	; 0x22
    1aa4:	9b a1       	ldd	r25, Y+35	; 0x23
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9f 8f       	std	Y+31, r25	; 0x1f
    1ab0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ab2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ab4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ab6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ab8:	8a 8f       	std	Y+26, r24	; 0x1a
    1aba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1abc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <Trigger_Enable+0x170>
    1ac2:	9b 8f       	std	Y+27, r25	; 0x1b
    1ac4:	8a 8f       	std	Y+26, r24	; 0x1a
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <Trigger_Enable+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ac8:	69 a5       	ldd	r22, Y+41	; 0x29
    1aca:	7a a5       	ldd	r23, Y+42	; 0x2a
    1acc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ace:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	88 a7       	std	Y+40, r24	; 0x28
    1ada:	88 a5       	ldd	r24, Y+40	; 0x28
    1adc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ade:	89 8d       	ldd	r24, Y+25	; 0x19
    1ae0:	8a 95       	dec	r24
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <Trigger_Enable+0x192>
    1ae4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_Write(EN,LOW);
    1ae6:	8a e0       	ldi	r24, 0x0A	; 10
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Dio_Write>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	aa ef       	ldi	r26, 0xFA	; 250
    1af4:	b4 e4       	ldi	r27, 0x44	; 68
    1af6:	8d 8b       	std	Y+21, r24	; 0x15
    1af8:	9e 8b       	std	Y+22, r25	; 0x16
    1afa:	af 8b       	std	Y+23, r26	; 0x17
    1afc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1afe:	6d 89       	ldd	r22, Y+21	; 0x15
    1b00:	7e 89       	ldd	r23, Y+22	; 0x16
    1b02:	8f 89       	ldd	r24, Y+23	; 0x17
    1b04:	98 8d       	ldd	r25, Y+24	; 0x18
    1b06:	2b ea       	ldi	r18, 0xAB	; 171
    1b08:	3a ea       	ldi	r19, 0xAA	; 170
    1b0a:	4a e2       	ldi	r20, 0x2A	; 42
    1b0c:	50 e4       	ldi	r21, 0x40	; 64
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	89 8b       	std	Y+17, r24	; 0x11
    1b18:	9a 8b       	std	Y+18, r25	; 0x12
    1b1a:	ab 8b       	std	Y+19, r26	; 0x13
    1b1c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b1e:	69 89       	ldd	r22, Y+17	; 0x11
    1b20:	7a 89       	ldd	r23, Y+18	; 0x12
    1b22:	8b 89       	ldd	r24, Y+19	; 0x13
    1b24:	9c 89       	ldd	r25, Y+20	; 0x14
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	1c f4       	brge	.+6      	; 0x1b3c <Trigger_Enable+0x1ee>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	88 8b       	std	Y+16, r24	; 0x10
    1b3a:	91 c0       	rjmp	.+290    	; 0x1c5e <Trigger_Enable+0x310>
	else if (__tmp > 255)
    1b3c:	69 89       	ldd	r22, Y+17	; 0x11
    1b3e:	7a 89       	ldd	r23, Y+18	; 0x12
    1b40:	8b 89       	ldd	r24, Y+19	; 0x13
    1b42:	9c 89       	ldd	r25, Y+20	; 0x14
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4f e7       	ldi	r20, 0x7F	; 127
    1b4a:	53 e4       	ldi	r21, 0x43	; 67
    1b4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b50:	18 16       	cp	r1, r24
    1b52:	0c f0       	brlt	.+2      	; 0x1b56 <Trigger_Enable+0x208>
    1b54:	7b c0       	rjmp	.+246    	; 0x1c4c <Trigger_Enable+0x2fe>
	{
		_delay_ms(__us / 1000.0);
    1b56:	6d 89       	ldd	r22, Y+21	; 0x15
    1b58:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	4a e7       	ldi	r20, 0x7A	; 122
    1b64:	54 e4       	ldi	r21, 0x44	; 68
    1b66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	8c 87       	std	Y+12, r24	; 0x0c
    1b70:	9d 87       	std	Y+13, r25	; 0x0d
    1b72:	ae 87       	std	Y+14, r26	; 0x0e
    1b74:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b76:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b78:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a ef       	ldi	r20, 0xFA	; 250
    1b84:	54 e4       	ldi	r21, 0x44	; 68
    1b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	88 87       	std	Y+8, r24	; 0x08
    1b90:	99 87       	std	Y+9, r25	; 0x09
    1b92:	aa 87       	std	Y+10, r26	; 0x0a
    1b94:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b96:	68 85       	ldd	r22, Y+8	; 0x08
    1b98:	79 85       	ldd	r23, Y+9	; 0x09
    1b9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e8       	ldi	r20, 0x80	; 128
    1ba4:	5f e3       	ldi	r21, 0x3F	; 63
    1ba6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1baa:	88 23       	and	r24, r24
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <Trigger_Enable+0x26a>
		__ticks = 1;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9f 83       	std	Y+7, r25	; 0x07
    1bb4:	8e 83       	std	Y+6, r24	; 0x06
    1bb6:	3f c0       	rjmp	.+126    	; 0x1c36 <Trigger_Enable+0x2e8>
	else if (__tmp > 65535)
    1bb8:	68 85       	ldd	r22, Y+8	; 0x08
    1bba:	79 85       	ldd	r23, Y+9	; 0x09
    1bbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	4c f5       	brge	.+82     	; 0x1c22 <Trigger_Enable+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bd2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9f 83       	std	Y+7, r25	; 0x07
    1bf6:	8e 83       	std	Y+6, r24	; 0x06
    1bf8:	0f c0       	rjmp	.+30     	; 0x1c18 <Trigger_Enable+0x2ca>
    1bfa:	88 ec       	ldi	r24, 0xC8	; 200
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	9d 83       	std	Y+5, r25	; 0x05
    1c00:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c02:	8c 81       	ldd	r24, Y+4	; 0x04
    1c04:	9d 81       	ldd	r25, Y+5	; 0x05
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <Trigger_Enable+0x2b8>
    1c0a:	9d 83       	std	Y+5, r25	; 0x05
    1c0c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c10:	9f 81       	ldd	r25, Y+7	; 0x07
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	9f 83       	std	Y+7, r25	; 0x07
    1c16:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	69 f7       	brne	.-38     	; 0x1bfa <Trigger_Enable+0x2ac>
    1c20:	24 c0       	rjmp	.+72     	; 0x1c6a <Trigger_Enable+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	68 85       	ldd	r22, Y+8	; 0x08
    1c24:	79 85       	ldd	r23, Y+9	; 0x09
    1c26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9f 83       	std	Y+7, r25	; 0x07
    1c34:	8e 83       	std	Y+6, r24	; 0x06
    1c36:	8e 81       	ldd	r24, Y+6	; 0x06
    1c38:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3a:	9b 83       	std	Y+3, r25	; 0x03
    1c3c:	8a 83       	std	Y+2, r24	; 0x02
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	9b 81       	ldd	r25, Y+3	; 0x03
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <Trigger_Enable+0x2f4>
    1c46:	9b 83       	std	Y+3, r25	; 0x03
    1c48:	8a 83       	std	Y+2, r24	; 0x02
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <Trigger_Enable+0x31c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c4c:	69 89       	ldd	r22, Y+17	; 0x11
    1c4e:	7a 89       	ldd	r23, Y+18	; 0x12
    1c50:	8b 89       	ldd	r24, Y+19	; 0x13
    1c52:	9c 89       	ldd	r25, Y+20	; 0x14
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	88 8b       	std	Y+16, r24	; 0x10
    1c5e:	88 89       	ldd	r24, Y+16	; 0x10
    1c60:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	8a 95       	dec	r24
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <Trigger_Enable+0x316>
    1c68:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
}
    1c6a:	e0 96       	adiw	r28, 0x30	; 48
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <Set_Cursor_Pos>:
static void Set_Cursor_Pos(u8 row,u8 column)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <Set_Cursor_Pos+0x6>
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <Set_Cursor_Pos+0x8>
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	81 50       	subi	r24, 0x01	; 1
    1c90:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	3c 83       	std	Y+4, r19	; 0x04
    1c9a:	2b 83       	std	Y+3, r18	; 0x03
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	31 f0       	breq	.+12     	; 0x1cb2 <Set_Cursor_Pos+0x36>
    1ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca8:	3c 81       	ldd	r19, Y+4	; 0x04
    1caa:	22 30       	cpi	r18, 0x02	; 2
    1cac:	31 05       	cpc	r19, r1
    1cae:	31 f0       	breq	.+12     	; 0x1cbc <Set_Cursor_Pos+0x40>
    1cb0:	09 c0       	rjmp	.+18     	; 0x1cc4 <Set_Cursor_Pos+0x48>
	            case ROW1: LCD_Send_Command((0x80 + column)); break;
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	80 58       	subi	r24, 0x80	; 128
    1cb6:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
    1cba:	04 c0       	rjmp	.+8      	; 0x1cc4 <Set_Cursor_Pos+0x48>
	            case ROW2: LCD_Send_Command((0xc0 + column)); break;
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	80 54       	subi	r24, 0x40	; 64
    1cc0:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
	            default:;
	        }
}
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <main>:
u8 Reset=1;

u8 FristNum[4];                       //Array to store the first number (Assuming the number of digits 4)
u8 SecondNum[4];						 //Array to store the Second number (Assuming the number of digits 4)
int main()
{
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	c2 59       	subi	r28, 0x92	; 146
    1ce0:	d0 40       	sbci	r29, 0x00	; 0
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
	Dio_init();
    1cec:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_init>
	LCD_Init();
    1cf0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_Init>

	/*   Set Password for First time   */
	LCD_Send_String_Pos("Set password",1,1);
    1cf4:	80 e6       	ldi	r24, 0x60	; 96
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	41 e0       	ldi	r20, 0x01	; 1
    1cfc:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_Send_String_Pos>
	while(1){
		do{
			KpValue = GetPressed();
    1d00:	0e 94 1d 09 	call	0x123a	; 0x123a <GetPressed>
    1d04:	80 93 eb 00 	sts	0x00EB, r24
		}while(KpValue != '&');
    1d08:	80 91 eb 00 	lds	r24, 0x00EB
    1d0c:	86 32       	cpi	r24, 0x26	; 38
    1d0e:	c1 f7       	brne	.-16     	; 0x1d00 <main+0x2e>
		NumberOfDigit++;
    1d10:	80 91 ff 00 	lds	r24, 0x00FF
    1d14:	8f 5f       	subi	r24, 0xFF	; 255
    1d16:	80 93 ff 00 	sts	0x00FF, r24
		if(KpValue == '&') break;
    1d1a:	80 91 eb 00 	lds	r24, 0x00EB
    1d1e:	86 32       	cpi	r24, 0x26	; 38
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <main+0x52>
    1d22:	d2 c0       	rjmp	.+420    	; 0x1ec8 <main+0x1f6>
		LCD_Send_Number_Pos(KpValue,2,NumberOfDigit);
    1d24:	80 91 eb 00 	lds	r24, 0x00EB
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e0       	ldi	r26, 0x00	; 0
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	20 91 ff 00 	lds	r18, 0x00FF
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	42 e0       	ldi	r20, 0x02	; 2
    1d3a:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_Send_Number_Pos>
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e7 57       	subi	r30, 0x77	; 119
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a8 e4       	ldi	r26, 0x48	; 72
    1d4a:	b3 e4       	ldi	r27, 0x43	; 67
    1d4c:	80 83       	st	Z, r24
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	a2 83       	std	Z+2, r26	; 0x02
    1d52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	8e 01       	movw	r16, r28
    1d56:	0b 57       	subi	r16, 0x7B	; 123
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e7 57       	subi	r30, 0x77	; 119
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a ef       	ldi	r20, 0xFA	; 250
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	f8 01       	movw	r30, r16
    1d7a:	80 83       	st	Z, r24
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	a2 83       	std	Z+2, r26	; 0x02
    1d80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d82:	fe 01       	movw	r30, r28
    1d84:	eb 57       	subi	r30, 0x7B	; 123
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	60 81       	ld	r22, Z
    1d8a:	71 81       	ldd	r23, Z+1	; 0x01
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e8       	ldi	r20, 0x80	; 128
    1d96:	5f e3       	ldi	r21, 0x3F	; 63
    1d98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9c:	88 23       	and	r24, r24
    1d9e:	44 f4       	brge	.+16     	; 0x1db0 <main+0xde>
		__ticks = 1;
    1da0:	fe 01       	movw	r30, r28
    1da2:	ed 57       	subi	r30, 0x7D	; 125
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	80 83       	st	Z, r24
    1dae:	64 c0       	rjmp	.+200    	; 0x1e78 <main+0x1a6>
	else if (__tmp > 65535)
    1db0:	fe 01       	movw	r30, r28
    1db2:	eb 57       	subi	r30, 0x7B	; 123
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	0c f0       	brlt	.+2      	; 0x1dd0 <main+0xfe>
    1dce:	43 c0       	rjmp	.+134    	; 0x1e56 <main+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e7 57       	subi	r30, 0x77	; 119
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	8e 01       	movw	r16, r28
    1df0:	0d 57       	subi	r16, 0x7D	; 125
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	f8 01       	movw	r30, r16
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
    1e06:	1f c0       	rjmp	.+62     	; 0x1e46 <main+0x174>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	ef 57       	subi	r30, 0x7F	; 127
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	88 ec       	ldi	r24, 0xC8	; 200
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e16:	fe 01       	movw	r30, r28
    1e18:	ef 57       	subi	r30, 0x7F	; 127
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <main+0x14e>
    1e24:	fe 01       	movw	r30, r28
    1e26:	ef 57       	subi	r30, 0x7F	; 127
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	de 01       	movw	r26, r28
    1e30:	ad 57       	subi	r26, 0x7D	; 125
    1e32:	bf 4f       	sbci	r27, 0xFF	; 255
    1e34:	fe 01       	movw	r30, r28
    1e36:	ed 57       	subi	r30, 0x7D	; 125
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	11 96       	adiw	r26, 0x01	; 1
    1e42:	9c 93       	st	X, r25
    1e44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e46:	fe 01       	movw	r30, r28
    1e48:	ed 57       	subi	r30, 0x7D	; 125
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	80 81       	ld	r24, Z
    1e4e:	91 81       	ldd	r25, Z+1	; 0x01
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	d1 f6       	brne	.-76     	; 0x1e08 <main+0x136>
    1e54:	27 c0       	rjmp	.+78     	; 0x1ea4 <main+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	8e 01       	movw	r16, r28
    1e58:	0d 57       	subi	r16, 0x7D	; 125
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	eb 57       	subi	r30, 0x7B	; 123
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	f8 01       	movw	r30, r16
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
    1e78:	de 01       	movw	r26, r28
    1e7a:	a1 58       	subi	r26, 0x81	; 129
    1e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7e:	fe 01       	movw	r30, r28
    1e80:	ed 57       	subi	r30, 0x7D	; 125
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	8d 93       	st	X+, r24
    1e8a:	9c 93       	st	X, r25
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e1 58       	subi	r30, 0x81	; 129
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <main+0x1c4>
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e1 58       	subi	r30, 0x81	; 129
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	91 83       	std	Z+1, r25	; 0x01
    1ea2:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_Send_Char_Pos('*',2,NumberOfDigit);
    1ea4:	90 91 ff 00 	lds	r25, 0x00FF
    1ea8:	8a e2       	ldi	r24, 0x2A	; 42
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	49 2f       	mov	r20, r25
    1eae:	0e 94 c3 0b 	call	0x1786	; 0x1786 <LCD_Send_Char_Pos>
		Pasword[NumberOfDigit] =KpValue;
    1eb2:	80 91 ff 00 	lds	r24, 0x00FF
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	20 91 eb 00 	lds	r18, 0x00EB
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	e0 5f       	subi	r30, 0xF0	; 240
    1ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec4:	20 83       	st	Z, r18
    1ec6:	1c cf       	rjmp	.-456    	; 0x1d00 <main+0x2e>

	while(1)
	{

		/*    Get Password To Check It    */
		LCD_Send_Command(lcd_clear);
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e5 58       	subi	r30, 0x85	; 133
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a8 ec       	ldi	r26, 0xC8	; 200
    1eda:	b2 e4       	ldi	r27, 0x42	; 66
    1edc:	80 83       	st	Z, r24
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	a2 83       	std	Z+2, r26	; 0x02
    1ee2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee4:	8e 01       	movw	r16, r28
    1ee6:	09 58       	subi	r16, 0x89	; 137
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eea:	fe 01       	movw	r30, r28
    1eec:	e5 58       	subi	r30, 0x85	; 133
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a ef       	ldi	r20, 0xFA	; 250
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	f8 01       	movw	r30, r16
    1f0a:	80 83       	st	Z, r24
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	a2 83       	std	Z+2, r26	; 0x02
    1f10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f12:	fe 01       	movw	r30, r28
    1f14:	e9 58       	subi	r30, 0x89	; 137
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	5f e3       	ldi	r21, 0x3F	; 63
    1f28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2c:	88 23       	and	r24, r24
    1f2e:	44 f4       	brge	.+16     	; 0x1f40 <main+0x26e>
		__ticks = 1;
    1f30:	fe 01       	movw	r30, r28
    1f32:	eb 58       	subi	r30, 0x8B	; 139
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	80 83       	st	Z, r24
    1f3e:	64 c0       	rjmp	.+200    	; 0x2008 <main+0x336>
	else if (__tmp > 65535)
    1f40:	fe 01       	movw	r30, r28
    1f42:	e9 58       	subi	r30, 0x89	; 137
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	3f ef       	ldi	r19, 0xFF	; 255
    1f52:	4f e7       	ldi	r20, 0x7F	; 127
    1f54:	57 e4       	ldi	r21, 0x47	; 71
    1f56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	0c f0       	brlt	.+2      	; 0x1f60 <main+0x28e>
    1f5e:	43 c0       	rjmp	.+134    	; 0x1fe6 <main+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f60:	fe 01       	movw	r30, r28
    1f62:	e5 58       	subi	r30, 0x85	; 133
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	8e 01       	movw	r16, r28
    1f80:	0b 58       	subi	r16, 0x8B	; 139
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	f8 01       	movw	r30, r16
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	1f c0       	rjmp	.+62     	; 0x1fd6 <main+0x304>
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ed 58       	subi	r30, 0x8D	; 141
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	88 ec       	ldi	r24, 0xC8	; 200
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	80 83       	st	Z, r24
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	ed 58       	subi	r30, 0x8D	; 141
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <main+0x2de>
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ed 58       	subi	r30, 0x8D	; 141
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	de 01       	movw	r26, r28
    1fc0:	ab 58       	subi	r26, 0x8B	; 139
    1fc2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	eb 58       	subi	r30, 0x8B	; 139
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	11 96       	adiw	r26, 0x01	; 1
    1fd2:	9c 93       	st	X, r25
    1fd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	eb 58       	subi	r30, 0x8B	; 139
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 81       	ld	r24, Z
    1fde:	91 81       	ldd	r25, Z+1	; 0x01
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	d1 f6       	brne	.-76     	; 0x1f98 <main+0x2c6>
    1fe4:	27 c0       	rjmp	.+78     	; 0x2034 <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe6:	8e 01       	movw	r16, r28
    1fe8:	0b 58       	subi	r16, 0x8B	; 139
    1fea:	1f 4f       	sbci	r17, 0xFF	; 255
    1fec:	fe 01       	movw	r30, r28
    1fee:	e9 58       	subi	r30, 0x89	; 137
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	60 81       	ld	r22, Z
    1ff4:	71 81       	ldd	r23, Z+1	; 0x01
    1ff6:	82 81       	ldd	r24, Z+2	; 0x02
    1ff8:	93 81       	ldd	r25, Z+3	; 0x03
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	f8 01       	movw	r30, r16
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
    2008:	de 01       	movw	r26, r28
    200a:	af 58       	subi	r26, 0x8F	; 143
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	fe 01       	movw	r30, r28
    2010:	eb 58       	subi	r30, 0x8B	; 139
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	91 81       	ldd	r25, Z+1	; 0x01
    2018:	8d 93       	st	X+, r24
    201a:	9c 93       	st	X, r25
    201c:	fe 01       	movw	r30, r28
    201e:	ef 58       	subi	r30, 0x8F	; 143
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <main+0x354>
    202a:	fe 01       	movw	r30, r28
    202c:	ef 58       	subi	r30, 0x8F	; 143
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
		_delay_ms(100);
		LCD_Send_String_Pos("check password",1,1);
    2034:	8d e6       	ldi	r24, 0x6D	; 109
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	61 e0       	ldi	r22, 0x01	; 1
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_Send_String_Pos>
		KpValue='\0';
    2040:	10 92 eb 00 	sts	0x00EB, r1
		counter=0;
    2044:	10 92 fe 00 	sts	0x00FE, r1
    2048:	e3 c0       	rjmp	.+454    	; 0x2210 <main+0x53e>
		while(KpValue != '&'){     // & --> on/off button

			do{
				KpValue = GetPressed();
    204a:	0e 94 1d 09 	call	0x123a	; 0x123a <GetPressed>
    204e:	80 93 eb 00 	sts	0x00EB, r24
			}while(KpValue == '\0');
    2052:	80 91 eb 00 	lds	r24, 0x00EB
    2056:	88 23       	and	r24, r24
    2058:	c1 f3       	breq	.-16     	; 0x204a <main+0x378>
			counter++;
    205a:	80 91 fe 00 	lds	r24, 0x00FE
    205e:	8f 5f       	subi	r24, 0xFF	; 255
    2060:	80 93 fe 00 	sts	0x00FE, r24
			if(KpValue == '&') break;
    2064:	80 91 eb 00 	lds	r24, 0x00EB
    2068:	86 32       	cpi	r24, 0x26	; 38
    206a:	09 f4       	brne	.+2      	; 0x206e <main+0x39c>
    206c:	d6 c0       	rjmp	.+428    	; 0x221a <main+0x548>
			LCD_Send_Number_Pos(KpValue,2,counter);
    206e:	80 91 eb 00 	lds	r24, 0x00EB
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e0       	ldi	r26, 0x00	; 0
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	20 91 fe 00 	lds	r18, 0x00FE
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	42 e0       	ldi	r20, 0x02	; 2
    2084:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_Send_Number_Pos>
    2088:	fe 01       	movw	r30, r28
    208a:	e3 59       	subi	r30, 0x93	; 147
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a8 e4       	ldi	r26, 0x48	; 72
    2094:	b3 e4       	ldi	r27, 0x43	; 67
    2096:	80 83       	st	Z, r24
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	a2 83       	std	Z+2, r26	; 0x02
    209c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209e:	8e 01       	movw	r16, r28
    20a0:	07 59       	subi	r16, 0x97	; 151
    20a2:	1f 4f       	sbci	r17, 0xFF	; 255
    20a4:	fe 01       	movw	r30, r28
    20a6:	e3 59       	subi	r30, 0x93	; 147
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a ef       	ldi	r20, 0xFA	; 250
    20b8:	54 e4       	ldi	r21, 0x44	; 68
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	f8 01       	movw	r30, r16
    20c4:	80 83       	st	Z, r24
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	a2 83       	std	Z+2, r26	; 0x02
    20ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20cc:	fe 01       	movw	r30, r28
    20ce:	e7 59       	subi	r30, 0x97	; 151
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	44 f4       	brge	.+16     	; 0x20fa <main+0x428>
		__ticks = 1;
    20ea:	fe 01       	movw	r30, r28
    20ec:	e9 59       	subi	r30, 0x99	; 153
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	80 83       	st	Z, r24
    20f8:	64 c0       	rjmp	.+200    	; 0x21c2 <main+0x4f0>
	else if (__tmp > 65535)
    20fa:	fe 01       	movw	r30, r28
    20fc:	e7 59       	subi	r30, 0x97	; 151
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	60 81       	ld	r22, Z
    2102:	71 81       	ldd	r23, Z+1	; 0x01
    2104:	82 81       	ldd	r24, Z+2	; 0x02
    2106:	93 81       	ldd	r25, Z+3	; 0x03
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	3f ef       	ldi	r19, 0xFF	; 255
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	57 e4       	ldi	r21, 0x47	; 71
    2110:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2114:	18 16       	cp	r1, r24
    2116:	0c f0       	brlt	.+2      	; 0x211a <main+0x448>
    2118:	43 c0       	rjmp	.+134    	; 0x21a0 <main+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211a:	fe 01       	movw	r30, r28
    211c:	e3 59       	subi	r30, 0x93	; 147
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	8e 01       	movw	r16, r28
    213a:	09 59       	subi	r16, 0x99	; 153
    213c:	1f 4f       	sbci	r17, 0xFF	; 255
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	f8 01       	movw	r30, r16
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	80 83       	st	Z, r24
    2150:	1f c0       	rjmp	.+62     	; 0x2190 <main+0x4be>
    2152:	fe 01       	movw	r30, r28
    2154:	eb 59       	subi	r30, 0x9B	; 155
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	88 ec       	ldi	r24, 0xC8	; 200
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	91 83       	std	Z+1, r25	; 0x01
    215e:	80 83       	st	Z, r24
    2160:	fe 01       	movw	r30, r28
    2162:	eb 59       	subi	r30, 0x9B	; 155
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <main+0x498>
    216e:	fe 01       	movw	r30, r28
    2170:	eb 59       	subi	r30, 0x9B	; 155
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2178:	de 01       	movw	r26, r28
    217a:	a9 59       	subi	r26, 0x99	; 153
    217c:	bf 4f       	sbci	r27, 0xFF	; 255
    217e:	fe 01       	movw	r30, r28
    2180:	e9 59       	subi	r30, 0x99	; 153
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	91 81       	ldd	r25, Z+1	; 0x01
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	11 96       	adiw	r26, 0x01	; 1
    218c:	9c 93       	st	X, r25
    218e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2190:	fe 01       	movw	r30, r28
    2192:	e9 59       	subi	r30, 0x99	; 153
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	d1 f6       	brne	.-76     	; 0x2152 <main+0x480>
    219e:	27 c0       	rjmp	.+78     	; 0x21ee <main+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a0:	8e 01       	movw	r16, r28
    21a2:	09 59       	subi	r16, 0x99	; 153
    21a4:	1f 4f       	sbci	r17, 0xFF	; 255
    21a6:	fe 01       	movw	r30, r28
    21a8:	e7 59       	subi	r30, 0x97	; 151
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	60 81       	ld	r22, Z
    21ae:	71 81       	ldd	r23, Z+1	; 0x01
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	f8 01       	movw	r30, r16
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	80 83       	st	Z, r24
    21c2:	de 01       	movw	r26, r28
    21c4:	ad 59       	subi	r26, 0x9D	; 157
    21c6:	bf 4f       	sbci	r27, 0xFF	; 255
    21c8:	fe 01       	movw	r30, r28
    21ca:	e9 59       	subi	r30, 0x99	; 153
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	8d 93       	st	X+, r24
    21d4:	9c 93       	st	X, r25
    21d6:	fe 01       	movw	r30, r28
    21d8:	ed 59       	subi	r30, 0x9D	; 157
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	80 81       	ld	r24, Z
    21de:	91 81       	ldd	r25, Z+1	; 0x01
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <main+0x50e>
    21e4:	fe 01       	movw	r30, r28
    21e6:	ed 59       	subi	r30, 0x9D	; 157
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
			_delay_ms(200);
			LCD_Send_Char_Pos('*',2,counter);
    21ee:	90 91 fe 00 	lds	r25, 0x00FE
    21f2:	8a e2       	ldi	r24, 0x2A	; 42
    21f4:	62 e0       	ldi	r22, 0x02	; 2
    21f6:	49 2f       	mov	r20, r25
    21f8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <LCD_Send_Char_Pos>
			CheckPasword[counter] =KpValue;
    21fc:	80 91 fe 00 	lds	r24, 0x00FE
    2200:	88 2f       	mov	r24, r24
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	20 91 eb 00 	lds	r18, 0x00EB
    2208:	fc 01       	movw	r30, r24
    220a:	e0 50       	subi	r30, 0x00	; 0
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	20 83       	st	Z, r18
		LCD_Send_Command(lcd_clear);
		_delay_ms(100);
		LCD_Send_String_Pos("check password",1,1);
		KpValue='\0';
		counter=0;
		while(KpValue != '&'){     // & --> on/off button
    2210:	80 91 eb 00 	lds	r24, 0x00EB
    2214:	86 32       	cpi	r24, 0x26	; 38
    2216:	09 f0       	breq	.+2      	; 0x221a <main+0x548>
    2218:	18 cf       	rjmp	.-464    	; 0x204a <main+0x378>
		}



		/*   Check if Password is correct or not  */
		if(Cheack_Password(CheckPasword,Pasword,NumberOfDigit))
    221a:	40 91 ff 00 	lds	r20, 0x00FF
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	20 e1       	ldi	r18, 0x10	; 16
    2224:	31 e0       	ldi	r19, 0x01	; 1
    2226:	b9 01       	movw	r22, r18
    2228:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <Cheack_Password>
    222c:	88 23       	and	r24, r24
    222e:	09 f4       	brne	.+2      	; 0x2232 <main+0x560>
    2230:	cb c4       	rjmp	.+2454   	; 0x2bc8 <main+0xef6>
		{

			/*   Loading to Start Calculator    */
			LCD_Send_Command(lcd_clear);
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
			LCD_Send_String_Pos("Loading",1,1);
    2238:	8c e7       	ldi	r24, 0x7C	; 124
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	61 e0       	ldi	r22, 0x01	; 1
    223e:	41 e0       	ldi	r20, 0x01	; 1
    2240:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_Send_String_Pos>
			for(u8 counter=0;counter<4;counter++)
    2244:	fe 01       	movw	r30, r28
    2246:	e0 57       	subi	r30, 0x70	; 112
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	10 82       	st	Z, r1
    224c:	c7 c0       	rjmp	.+398    	; 0x23dc <main+0x70a>
			{
				LCD_Send_Char_Pos('.',1,counter+8);
    224e:	fe 01       	movw	r30, r28
    2250:	e0 57       	subi	r30, 0x70	; 112
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	98 2f       	mov	r25, r24
    2258:	98 5f       	subi	r25, 0xF8	; 248
    225a:	8e e2       	ldi	r24, 0x2E	; 46
    225c:	61 e0       	ldi	r22, 0x01	; 1
    225e:	49 2f       	mov	r20, r25
    2260:	0e 94 c3 0b 	call	0x1786	; 0x1786 <LCD_Send_Char_Pos>
    2264:	fe 01       	movw	r30, r28
    2266:	e1 5a       	subi	r30, 0xA1	; 161
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	aa ef       	ldi	r26, 0xFA	; 250
    2270:	b3 e4       	ldi	r27, 0x43	; 67
    2272:	80 83       	st	Z, r24
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	a2 83       	std	Z+2, r26	; 0x02
    2278:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227a:	8e 01       	movw	r16, r28
    227c:	05 5a       	subi	r16, 0xA5	; 165
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
    2280:	fe 01       	movw	r30, r28
    2282:	e1 5a       	subi	r30, 0xA1	; 161
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	60 81       	ld	r22, Z
    2288:	71 81       	ldd	r23, Z+1	; 0x01
    228a:	82 81       	ldd	r24, Z+2	; 0x02
    228c:	93 81       	ldd	r25, Z+3	; 0x03
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a ef       	ldi	r20, 0xFA	; 250
    2294:	54 e4       	ldi	r21, 0x44	; 68
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	f8 01       	movw	r30, r16
    22a0:	80 83       	st	Z, r24
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	a2 83       	std	Z+2, r26	; 0x02
    22a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22a8:	fe 01       	movw	r30, r28
    22aa:	e5 5a       	subi	r30, 0xA5	; 165
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	60 81       	ld	r22, Z
    22b0:	71 81       	ldd	r23, Z+1	; 0x01
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e8       	ldi	r20, 0x80	; 128
    22bc:	5f e3       	ldi	r21, 0x3F	; 63
    22be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	44 f4       	brge	.+16     	; 0x22d6 <main+0x604>
		__ticks = 1;
    22c6:	fe 01       	movw	r30, r28
    22c8:	e7 5a       	subi	r30, 0xA7	; 167
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
    22d4:	64 c0       	rjmp	.+200    	; 0x239e <main+0x6cc>
	else if (__tmp > 65535)
    22d6:	fe 01       	movw	r30, r28
    22d8:	e5 5a       	subi	r30, 0xA5	; 165
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	0c f0       	brlt	.+2      	; 0x22f6 <main+0x624>
    22f4:	43 c0       	rjmp	.+134    	; 0x237c <main+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	fe 01       	movw	r30, r28
    22f8:	e1 5a       	subi	r30, 0xA1	; 161
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e2       	ldi	r20, 0x20	; 32
    230a:	51 e4       	ldi	r21, 0x41	; 65
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8e 01       	movw	r16, r28
    2316:	07 5a       	subi	r16, 0xA7	; 167
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
    232c:	1f c0       	rjmp	.+62     	; 0x236c <main+0x69a>
    232e:	fe 01       	movw	r30, r28
    2330:	e9 5a       	subi	r30, 0xA9	; 169
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	88 ec       	ldi	r24, 0xC8	; 200
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	80 83       	st	Z, r24
    233c:	fe 01       	movw	r30, r28
    233e:	e9 5a       	subi	r30, 0xA9	; 169
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	80 81       	ld	r24, Z
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <main+0x674>
    234a:	fe 01       	movw	r30, r28
    234c:	e9 5a       	subi	r30, 0xA9	; 169
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	de 01       	movw	r26, r28
    2356:	a7 5a       	subi	r26, 0xA7	; 167
    2358:	bf 4f       	sbci	r27, 0xFF	; 255
    235a:	fe 01       	movw	r30, r28
    235c:	e7 5a       	subi	r30, 0xA7	; 167
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	91 81       	ldd	r25, Z+1	; 0x01
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	11 96       	adiw	r26, 0x01	; 1
    2368:	9c 93       	st	X, r25
    236a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	fe 01       	movw	r30, r28
    236e:	e7 5a       	subi	r30, 0xA7	; 167
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	d1 f6       	brne	.-76     	; 0x232e <main+0x65c>
    237a:	27 c0       	rjmp	.+78     	; 0x23ca <main+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237c:	8e 01       	movw	r16, r28
    237e:	07 5a       	subi	r16, 0xA7	; 167
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	fe 01       	movw	r30, r28
    2384:	e5 5a       	subi	r30, 0xA5	; 165
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	f8 01       	movw	r30, r16
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
    239e:	de 01       	movw	r26, r28
    23a0:	ab 5a       	subi	r26, 0xAB	; 171
    23a2:	bf 4f       	sbci	r27, 0xFF	; 255
    23a4:	fe 01       	movw	r30, r28
    23a6:	e7 5a       	subi	r30, 0xA7	; 167
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	8d 93       	st	X+, r24
    23b0:	9c 93       	st	X, r25
    23b2:	fe 01       	movw	r30, r28
    23b4:	eb 5a       	subi	r30, 0xAB	; 171
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <main+0x6ea>
    23c0:	fe 01       	movw	r30, r28
    23c2:	eb 5a       	subi	r30, 0xAB	; 171
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
		{

			/*   Loading to Start Calculator    */
			LCD_Send_Command(lcd_clear);
			LCD_Send_String_Pos("Loading",1,1);
			for(u8 counter=0;counter<4;counter++)
    23ca:	de 01       	movw	r26, r28
    23cc:	a0 57       	subi	r26, 0x70	; 112
    23ce:	bf 4f       	sbci	r27, 0xFF	; 255
    23d0:	fe 01       	movw	r30, r28
    23d2:	e0 57       	subi	r30, 0x70	; 112
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	8f 5f       	subi	r24, 0xFF	; 255
    23da:	8c 93       	st	X, r24
    23dc:	fe 01       	movw	r30, r28
    23de:	e0 57       	subi	r30, 0x70	; 112
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	84 30       	cpi	r24, 0x04	; 4
    23e6:	08 f4       	brcc	.+2      	; 0x23ea <main+0x718>
    23e8:	32 cf       	rjmp	.-412    	; 0x224e <main+0x57c>
    23ea:	fe 01       	movw	r30, r28
    23ec:	ef 5a       	subi	r30, 0xAF	; 175
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a8 e4       	ldi	r26, 0x48	; 72
    23f6:	b3 e4       	ldi	r27, 0x43	; 67
    23f8:	80 83       	st	Z, r24
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	a2 83       	std	Z+2, r26	; 0x02
    23fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2400:	8e 01       	movw	r16, r28
    2402:	03 5b       	subi	r16, 0xB3	; 179
    2404:	1f 4f       	sbci	r17, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	ef 5a       	subi	r30, 0xAF	; 175
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4a ef       	ldi	r20, 0xFA	; 250
    241a:	54 e4       	ldi	r21, 0x44	; 68
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	f8 01       	movw	r30, r16
    2426:	80 83       	st	Z, r24
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	a2 83       	std	Z+2, r26	; 0x02
    242c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    242e:	fe 01       	movw	r30, r28
    2430:	e3 5b       	subi	r30, 0xB3	; 179
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	44 f4       	brge	.+16     	; 0x245c <main+0x78a>
		__ticks = 1;
    244c:	fe 01       	movw	r30, r28
    244e:	e5 5b       	subi	r30, 0xB5	; 181
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	80 83       	st	Z, r24
    245a:	64 c0       	rjmp	.+200    	; 0x2524 <main+0x852>
	else if (__tmp > 65535)
    245c:	fe 01       	movw	r30, r28
    245e:	e3 5b       	subi	r30, 0xB3	; 179
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	60 81       	ld	r22, Z
    2464:	71 81       	ldd	r23, Z+1	; 0x01
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	93 81       	ldd	r25, Z+3	; 0x03
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	3f ef       	ldi	r19, 0xFF	; 255
    246e:	4f e7       	ldi	r20, 0x7F	; 127
    2470:	57 e4       	ldi	r21, 0x47	; 71
    2472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2476:	18 16       	cp	r1, r24
    2478:	0c f0       	brlt	.+2      	; 0x247c <main+0x7aa>
    247a:	43 c0       	rjmp	.+134    	; 0x2502 <main+0x830>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	fe 01       	movw	r30, r28
    247e:	ef 5a       	subi	r30, 0xAF	; 175
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	8e 01       	movw	r16, r28
    249c:	05 5b       	subi	r16, 0xB5	; 181
    249e:	1f 4f       	sbci	r17, 0xFF	; 255
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	f8 01       	movw	r30, r16
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	80 83       	st	Z, r24
    24b2:	1f c0       	rjmp	.+62     	; 0x24f2 <main+0x820>
    24b4:	fe 01       	movw	r30, r28
    24b6:	e7 5b       	subi	r30, 0xB7	; 183
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	88 ec       	ldi	r24, 0xC8	; 200
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
    24c2:	fe 01       	movw	r30, r28
    24c4:	e7 5b       	subi	r30, 0xB7	; 183
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 81       	ld	r24, Z
    24ca:	91 81       	ldd	r25, Z+1	; 0x01
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <main+0x7fa>
    24d0:	fe 01       	movw	r30, r28
    24d2:	e7 5b       	subi	r30, 0xB7	; 183
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	de 01       	movw	r26, r28
    24dc:	a5 5b       	subi	r26, 0xB5	; 181
    24de:	bf 4f       	sbci	r27, 0xFF	; 255
    24e0:	fe 01       	movw	r30, r28
    24e2:	e5 5b       	subi	r30, 0xB5	; 181
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	91 81       	ldd	r25, Z+1	; 0x01
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	11 96       	adiw	r26, 0x01	; 1
    24ee:	9c 93       	st	X, r25
    24f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f2:	fe 01       	movw	r30, r28
    24f4:	e5 5b       	subi	r30, 0xB5	; 181
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	d1 f6       	brne	.-76     	; 0x24b4 <main+0x7e2>
    2500:	27 c0       	rjmp	.+78     	; 0x2550 <main+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2502:	8e 01       	movw	r16, r28
    2504:	05 5b       	subi	r16, 0xB5	; 181
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	fe 01       	movw	r30, r28
    250a:	e3 5b       	subi	r30, 0xB3	; 179
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	f8 01       	movw	r30, r16
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	80 83       	st	Z, r24
    2524:	de 01       	movw	r26, r28
    2526:	a9 5b       	subi	r26, 0xB9	; 185
    2528:	bf 4f       	sbci	r27, 0xFF	; 255
    252a:	fe 01       	movw	r30, r28
    252c:	e5 5b       	subi	r30, 0xB5	; 181
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	8d 93       	st	X+, r24
    2536:	9c 93       	st	X, r25
    2538:	fe 01       	movw	r30, r28
    253a:	e9 5b       	subi	r30, 0xB9	; 185
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	80 81       	ld	r24, Z
    2540:	91 81       	ldd	r25, Z+1	; 0x01
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <main+0x870>
    2546:	fe 01       	movw	r30, r28
    2548:	e9 5b       	subi	r30, 0xB9	; 185
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
			{
				LCD_Send_Char_Pos('.',1,counter+8);
				_delay_ms(500);
			}
			_delay_ms(200);
			LCD_Send_Command(lcd_clear);
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
			LCD_Send_String_Pos("Welecome",1,1);
    2556:	84 e8       	ldi	r24, 0x84	; 132
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	61 e0       	ldi	r22, 0x01	; 1
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_Send_String_Pos>


			Reset=1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	80 93 ec 00 	sts	0x00EC, r24
			/*    loop for repeating the calculation    */
			while(1){
				LCD_Send_String_Pos("calc is ready",2,1);
    2568:	8d e8       	ldi	r24, 0x8D	; 141
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	62 e0       	ldi	r22, 0x02	; 2
    256e:	41 e0       	ldi	r20, 0x01	; 1
    2570:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_Send_String_Pos>
    2574:	fe 01       	movw	r30, r28
    2576:	ed 5b       	subi	r30, 0xBD	; 189
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	aa e7       	ldi	r26, 0x7A	; 122
    2580:	b4 e4       	ldi	r27, 0x44	; 68
    2582:	80 83       	st	Z, r24
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	a2 83       	std	Z+2, r26	; 0x02
    2588:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258a:	8e 01       	movw	r16, r28
    258c:	01 5c       	subi	r16, 0xC1	; 193
    258e:	1f 4f       	sbci	r17, 0xFF	; 255
    2590:	fe 01       	movw	r30, r28
    2592:	ed 5b       	subi	r30, 0xBD	; 189
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	4a ef       	ldi	r20, 0xFA	; 250
    25a4:	54 e4       	ldi	r21, 0x44	; 68
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	f8 01       	movw	r30, r16
    25b0:	80 83       	st	Z, r24
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	a2 83       	std	Z+2, r26	; 0x02
    25b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25b8:	fe 01       	movw	r30, r28
    25ba:	ff 96       	adiw	r30, 0x3f	; 63
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	82 81       	ldd	r24, Z+2	; 0x02
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	2c f4       	brge	.+10     	; 0x25de <main+0x90c>
		__ticks = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9e af       	std	Y+62, r25	; 0x3e
    25da:	8d af       	std	Y+61, r24	; 0x3d
    25dc:	46 c0       	rjmp	.+140    	; 0x266a <main+0x998>
	else if (__tmp > 65535)
    25de:	fe 01       	movw	r30, r28
    25e0:	ff 96       	adiw	r30, 0x3f	; 63
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	3f ef       	ldi	r19, 0xFF	; 255
    25ee:	4f e7       	ldi	r20, 0x7F	; 127
    25f0:	57 e4       	ldi	r21, 0x47	; 71
    25f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25f6:	18 16       	cp	r1, r24
    25f8:	64 f5       	brge	.+88     	; 0x2652 <main+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fa:	fe 01       	movw	r30, r28
    25fc:	ed 5b       	subi	r30, 0xBD	; 189
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e2       	ldi	r20, 0x20	; 32
    260e:	51 e4       	ldi	r21, 0x41	; 65
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	bc 01       	movw	r22, r24
    261a:	cd 01       	movw	r24, r26
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9e af       	std	Y+62, r25	; 0x3e
    2626:	8d af       	std	Y+61, r24	; 0x3d
    2628:	0f c0       	rjmp	.+30     	; 0x2648 <main+0x976>
    262a:	88 ec       	ldi	r24, 0xC8	; 200
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	9c af       	std	Y+60, r25	; 0x3c
    2630:	8b af       	std	Y+59, r24	; 0x3b
    2632:	8b ad       	ldd	r24, Y+59	; 0x3b
    2634:	9c ad       	ldd	r25, Y+60	; 0x3c
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <main+0x964>
    263a:	9c af       	std	Y+60, r25	; 0x3c
    263c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2640:	9e ad       	ldd	r25, Y+62	; 0x3e
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	9e af       	std	Y+62, r25	; 0x3e
    2646:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2648:	8d ad       	ldd	r24, Y+61	; 0x3d
    264a:	9e ad       	ldd	r25, Y+62	; 0x3e
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	69 f7       	brne	.-38     	; 0x262a <main+0x958>
    2650:	16 c0       	rjmp	.+44     	; 0x267e <main+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2652:	fe 01       	movw	r30, r28
    2654:	ff 96       	adiw	r30, 0x3f	; 63
    2656:	60 81       	ld	r22, Z
    2658:	71 81       	ldd	r23, Z+1	; 0x01
    265a:	82 81       	ldd	r24, Z+2	; 0x02
    265c:	93 81       	ldd	r25, Z+3	; 0x03
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9e af       	std	Y+62, r25	; 0x3e
    2668:	8d af       	std	Y+61, r24	; 0x3d
    266a:	8d ad       	ldd	r24, Y+61	; 0x3d
    266c:	9e ad       	ldd	r25, Y+62	; 0x3e
    266e:	9a af       	std	Y+58, r25	; 0x3a
    2670:	89 af       	std	Y+57, r24	; 0x39
    2672:	89 ad       	ldd	r24, Y+57	; 0x39
    2674:	9a ad       	ldd	r25, Y+58	; 0x3a
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <main+0x9a4>
    267a:	9a af       	std	Y+58, r25	; 0x3a
    267c:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1000);
				LCD_Send_Command(lcd_clear);
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
				//KpValue == '\0';
				counter=0;
    2684:	10 92 fe 00 	sts	0x00FE, r1
				u8 opration=0;
    2688:	fe 01       	movw	r30, r28
    268a:	e1 57       	subi	r30, 0x71	; 113
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	10 82       	st	Z, r1

				/*    Getting The First Number    */
				while(1)
				{
					do{
						KpValue = GetPressed();
    2690:	0e 94 1d 09 	call	0x123a	; 0x123a <GetPressed>
    2694:	80 93 eb 00 	sts	0x00EB, r24
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	a8 e4       	ldi	r26, 0x48	; 72
    269e:	b3 e4       	ldi	r27, 0x43	; 67
    26a0:	8d ab       	std	Y+53, r24	; 0x35
    26a2:	9e ab       	std	Y+54, r25	; 0x36
    26a4:	af ab       	std	Y+55, r26	; 0x37
    26a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a8:	6d a9       	ldd	r22, Y+53	; 0x35
    26aa:	7e a9       	ldd	r23, Y+54	; 0x36
    26ac:	8f a9       	ldd	r24, Y+55	; 0x37
    26ae:	98 ad       	ldd	r25, Y+56	; 0x38
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	4a ef       	ldi	r20, 0xFA	; 250
    26b6:	54 e4       	ldi	r21, 0x44	; 68
    26b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	89 ab       	std	Y+49, r24	; 0x31
    26c2:	9a ab       	std	Y+50, r25	; 0x32
    26c4:	ab ab       	std	Y+51, r26	; 0x33
    26c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26c8:	69 a9       	ldd	r22, Y+49	; 0x31
    26ca:	7a a9       	ldd	r23, Y+50	; 0x32
    26cc:	8b a9       	ldd	r24, Y+51	; 0x33
    26ce:	9c a9       	ldd	r25, Y+52	; 0x34
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e8       	ldi	r20, 0x80	; 128
    26d6:	5f e3       	ldi	r21, 0x3F	; 63
    26d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26dc:	88 23       	and	r24, r24
    26de:	2c f4       	brge	.+10     	; 0x26ea <main+0xa18>
		__ticks = 1;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	98 ab       	std	Y+48, r25	; 0x30
    26e6:	8f a7       	std	Y+47, r24	; 0x2f
    26e8:	3f c0       	rjmp	.+126    	; 0x2768 <main+0xa96>
	else if (__tmp > 65535)
    26ea:	69 a9       	ldd	r22, Y+49	; 0x31
    26ec:	7a a9       	ldd	r23, Y+50	; 0x32
    26ee:	8b a9       	ldd	r24, Y+51	; 0x33
    26f0:	9c a9       	ldd	r25, Y+52	; 0x34
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	3f ef       	ldi	r19, 0xFF	; 255
    26f6:	4f e7       	ldi	r20, 0x7F	; 127
    26f8:	57 e4       	ldi	r21, 0x47	; 71
    26fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26fe:	18 16       	cp	r1, r24
    2700:	4c f5       	brge	.+82     	; 0x2754 <main+0xa82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2702:	6d a9       	ldd	r22, Y+53	; 0x35
    2704:	7e a9       	ldd	r23, Y+54	; 0x36
    2706:	8f a9       	ldd	r24, Y+55	; 0x37
    2708:	98 ad       	ldd	r25, Y+56	; 0x38
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e2       	ldi	r20, 0x20	; 32
    2710:	51 e4       	ldi	r21, 0x41	; 65
    2712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	98 ab       	std	Y+48, r25	; 0x30
    2728:	8f a7       	std	Y+47, r24	; 0x2f
    272a:	0f c0       	rjmp	.+30     	; 0x274a <main+0xa78>
    272c:	88 ec       	ldi	r24, 0xC8	; 200
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9e a7       	std	Y+46, r25	; 0x2e
    2732:	8d a7       	std	Y+45, r24	; 0x2d
    2734:	8d a5       	ldd	r24, Y+45	; 0x2d
    2736:	9e a5       	ldd	r25, Y+46	; 0x2e
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <main+0xa66>
    273c:	9e a7       	std	Y+46, r25	; 0x2e
    273e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2740:	8f a5       	ldd	r24, Y+47	; 0x2f
    2742:	98 a9       	ldd	r25, Y+48	; 0x30
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	98 ab       	std	Y+48, r25	; 0x30
    2748:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274a:	8f a5       	ldd	r24, Y+47	; 0x2f
    274c:	98 a9       	ldd	r25, Y+48	; 0x30
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	69 f7       	brne	.-38     	; 0x272c <main+0xa5a>
    2752:	14 c0       	rjmp	.+40     	; 0x277c <main+0xaaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2754:	69 a9       	ldd	r22, Y+49	; 0x31
    2756:	7a a9       	ldd	r23, Y+50	; 0x32
    2758:	8b a9       	ldd	r24, Y+51	; 0x33
    275a:	9c a9       	ldd	r25, Y+52	; 0x34
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	98 ab       	std	Y+48, r25	; 0x30
    2766:	8f a7       	std	Y+47, r24	; 0x2f
    2768:	8f a5       	ldd	r24, Y+47	; 0x2f
    276a:	98 a9       	ldd	r25, Y+48	; 0x30
    276c:	9c a7       	std	Y+44, r25	; 0x2c
    276e:	8b a7       	std	Y+43, r24	; 0x2b
    2770:	8b a5       	ldd	r24, Y+43	; 0x2b
    2772:	9c a5       	ldd	r25, Y+44	; 0x2c
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <main+0xaa2>
    2778:	9c a7       	std	Y+44, r25	; 0x2c
    277a:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(200);
					}while(KpValue == '\0');
    277c:	80 91 eb 00 	lds	r24, 0x00EB
    2780:	88 23       	and	r24, r24
    2782:	09 f4       	brne	.+2      	; 0x2786 <main+0xab4>
    2784:	85 cf       	rjmp	.-246    	; 0x2690 <main+0x9be>
					if(KpValue == '+' || KpValue == '-' || KpValue == '/' || KpValue == '*'){
    2786:	80 91 eb 00 	lds	r24, 0x00EB
    278a:	8b 32       	cpi	r24, 0x2B	; 43
    278c:	61 f0       	breq	.+24     	; 0x27a6 <main+0xad4>
    278e:	80 91 eb 00 	lds	r24, 0x00EB
    2792:	8d 32       	cpi	r24, 0x2D	; 45
    2794:	41 f0       	breq	.+16     	; 0x27a6 <main+0xad4>
    2796:	80 91 eb 00 	lds	r24, 0x00EB
    279a:	8f 32       	cpi	r24, 0x2F	; 47
    279c:	21 f0       	breq	.+8      	; 0x27a6 <main+0xad4>
    279e:	80 91 eb 00 	lds	r24, 0x00EB
    27a2:	8a 32       	cpi	r24, 0x2A	; 42
    27a4:	e9 f4       	brne	.+58     	; 0x27e0 <main+0xb0e>
						opration = KpValue;
    27a6:	fe 01       	movw	r30, r28
    27a8:	e1 57       	subi	r30, 0x71	; 113
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 91 eb 00 	lds	r24, 0x00EB
    27b0:	80 83       	st	Z, r24
						LCD_Send_Char_Pos(KpValue,1,counter+1);
    27b2:	90 91 eb 00 	lds	r25, 0x00EB
    27b6:	80 91 fe 00 	lds	r24, 0x00FE
    27ba:	28 2f       	mov	r18, r24
    27bc:	2f 5f       	subi	r18, 0xFF	; 255
    27be:	89 2f       	mov	r24, r25
    27c0:	61 e0       	ldi	r22, 0x01	; 1
    27c2:	42 2f       	mov	r20, r18
    27c4:	0e 94 c3 0b 	call	0x1786	; 0x1786 <LCD_Send_Char_Pos>
					FristNum[counter]=KpValue;
					counter++;
					LCD_Send_Number_Pos(KpValue,1,counter);

				}
				u8 counter2=counter+1;
    27c8:	80 91 fe 00 	lds	r24, 0x00FE
    27cc:	fe 01       	movw	r30, r28
    27ce:	e2 57       	subi	r30, 0x72	; 114
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	8f 5f       	subi	r24, 0xFF	; 255
    27d4:	80 83       	st	Z, r24
				u8 counter3=0;
    27d6:	fe 01       	movw	r30, r28
    27d8:	e3 57       	subi	r30, 0x73	; 115
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	10 82       	st	Z, r1
    27de:	1d c0       	rjmp	.+58     	; 0x281a <main+0xb48>
					if(KpValue == '+' || KpValue == '-' || KpValue == '/' || KpValue == '*'){
						opration = KpValue;
						LCD_Send_Char_Pos(KpValue,1,counter+1);
						break;
					}
					FristNum[counter]=KpValue;
    27e0:	80 91 fe 00 	lds	r24, 0x00FE
    27e4:	88 2f       	mov	r24, r24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	20 91 eb 00 	lds	r18, 0x00EB
    27ec:	fc 01       	movw	r30, r24
    27ee:	ec 5d       	subi	r30, 0xDC	; 220
    27f0:	fe 4f       	sbci	r31, 0xFE	; 254
    27f2:	20 83       	st	Z, r18
					counter++;
    27f4:	80 91 fe 00 	lds	r24, 0x00FE
    27f8:	8f 5f       	subi	r24, 0xFF	; 255
    27fa:	80 93 fe 00 	sts	0x00FE, r24
					LCD_Send_Number_Pos(KpValue,1,counter);
    27fe:	80 91 eb 00 	lds	r24, 0x00EB
    2802:	88 2f       	mov	r24, r24
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	a0 e0       	ldi	r26, 0x00	; 0
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	20 91 fe 00 	lds	r18, 0x00FE
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_Send_Number_Pos>
    2818:	3b cf       	rjmp	.-394    	; 0x2690 <main+0x9be>

				/*    Getting The Second Number    */
				while(1)
				{
					do{
						KpValue = GetPressed();
    281a:	0e 94 1d 09 	call	0x123a	; 0x123a <GetPressed>
    281e:	80 93 eb 00 	sts	0x00EB, r24
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a8 e4       	ldi	r26, 0x48	; 72
    2828:	b3 e4       	ldi	r27, 0x43	; 67
    282a:	8f a3       	std	Y+39, r24	; 0x27
    282c:	98 a7       	std	Y+40, r25	; 0x28
    282e:	a9 a7       	std	Y+41, r26	; 0x29
    2830:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2832:	6f a1       	ldd	r22, Y+39	; 0x27
    2834:	78 a5       	ldd	r23, Y+40	; 0x28
    2836:	89 a5       	ldd	r24, Y+41	; 0x29
    2838:	9a a5       	ldd	r25, Y+42	; 0x2a
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a ef       	ldi	r20, 0xFA	; 250
    2840:	54 e4       	ldi	r21, 0x44	; 68
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8b a3       	std	Y+35, r24	; 0x23
    284c:	9c a3       	std	Y+36, r25	; 0x24
    284e:	ad a3       	std	Y+37, r26	; 0x25
    2850:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2852:	6b a1       	ldd	r22, Y+35	; 0x23
    2854:	7c a1       	ldd	r23, Y+36	; 0x24
    2856:	8d a1       	ldd	r24, Y+37	; 0x25
    2858:	9e a1       	ldd	r25, Y+38	; 0x26
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	2c f4       	brge	.+10     	; 0x2874 <main+0xba2>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9a a3       	std	Y+34, r25	; 0x22
    2870:	89 a3       	std	Y+33, r24	; 0x21
    2872:	3f c0       	rjmp	.+126    	; 0x28f2 <main+0xc20>
	else if (__tmp > 65535)
    2874:	6b a1       	ldd	r22, Y+35	; 0x23
    2876:	7c a1       	ldd	r23, Y+36	; 0x24
    2878:	8d a1       	ldd	r24, Y+37	; 0x25
    287a:	9e a1       	ldd	r25, Y+38	; 0x26
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	3f ef       	ldi	r19, 0xFF	; 255
    2880:	4f e7       	ldi	r20, 0x7F	; 127
    2882:	57 e4       	ldi	r21, 0x47	; 71
    2884:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2888:	18 16       	cp	r1, r24
    288a:	4c f5       	brge	.+82     	; 0x28de <main+0xc0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288c:	6f a1       	ldd	r22, Y+39	; 0x27
    288e:	78 a5       	ldd	r23, Y+40	; 0x28
    2890:	89 a5       	ldd	r24, Y+41	; 0x29
    2892:	9a a5       	ldd	r25, Y+42	; 0x2a
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e2       	ldi	r20, 0x20	; 32
    289a:	51 e4       	ldi	r21, 0x41	; 65
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9a a3       	std	Y+34, r25	; 0x22
    28b2:	89 a3       	std	Y+33, r24	; 0x21
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <main+0xc02>
    28b6:	88 ec       	ldi	r24, 0xC8	; 200
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	98 a3       	std	Y+32, r25	; 0x20
    28bc:	8f 8f       	std	Y+31, r24	; 0x1f
    28be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28c0:	98 a1       	ldd	r25, Y+32	; 0x20
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <main+0xbf0>
    28c6:	98 a3       	std	Y+32, r25	; 0x20
    28c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	89 a1       	ldd	r24, Y+33	; 0x21
    28cc:	9a a1       	ldd	r25, Y+34	; 0x22
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9a a3       	std	Y+34, r25	; 0x22
    28d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	89 a1       	ldd	r24, Y+33	; 0x21
    28d6:	9a a1       	ldd	r25, Y+34	; 0x22
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	69 f7       	brne	.-38     	; 0x28b6 <main+0xbe4>
    28dc:	14 c0       	rjmp	.+40     	; 0x2906 <main+0xc34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	6b a1       	ldd	r22, Y+35	; 0x23
    28e0:	7c a1       	ldd	r23, Y+36	; 0x24
    28e2:	8d a1       	ldd	r24, Y+37	; 0x25
    28e4:	9e a1       	ldd	r25, Y+38	; 0x26
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9a a3       	std	Y+34, r25	; 0x22
    28f0:	89 a3       	std	Y+33, r24	; 0x21
    28f2:	89 a1       	ldd	r24, Y+33	; 0x21
    28f4:	9a a1       	ldd	r25, Y+34	; 0x22
    28f6:	9e 8f       	std	Y+30, r25	; 0x1e
    28f8:	8d 8f       	std	Y+29, r24	; 0x1d
    28fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <main+0xc2c>
    2902:	9e 8f       	std	Y+30, r25	; 0x1e
    2904:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(200);
					}while(KpValue == '\0');
    2906:	80 91 eb 00 	lds	r24, 0x00EB
    290a:	88 23       	and	r24, r24
    290c:	09 f4       	brne	.+2      	; 0x2910 <main+0xc3e>
    290e:	85 cf       	rjmp	.-246    	; 0x281a <main+0xb48>
					if(KpValue == '=' ){
    2910:	80 91 eb 00 	lds	r24, 0x00EB
    2914:	8d 33       	cpi	r24, 0x3D	; 61
    2916:	09 f0       	breq	.+2      	; 0x291a <main+0xc48>
    2918:	4c c0       	rjmp	.+152    	; 0x29b2 <main+0xce0>
						LCD_Send_Char_Pos(KpValue,1,counter2+1);
    291a:	20 91 eb 00 	lds	r18, 0x00EB
    291e:	fe 01       	movw	r30, r28
    2920:	e2 57       	subi	r30, 0x72	; 114
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	80 81       	ld	r24, Z
    2926:	98 2f       	mov	r25, r24
    2928:	9f 5f       	subi	r25, 0xFF	; 255
    292a:	82 2f       	mov	r24, r18
    292c:	61 e0       	ldi	r22, 0x01	; 1
    292e:	49 2f       	mov	r20, r25
    2930:	0e 94 c3 0b 	call	0x1786	; 0x1786 <LCD_Send_Char_Pos>
					LCD_Send_Number_Pos(KpValue,1,counter2);
				}


				/*     switch which operation was Selected */
				switch(opration)
    2934:	fe 01       	movw	r30, r28
    2936:	e1 57       	subi	r30, 0x71	; 113
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 81       	ld	r24, Z
    293c:	28 2f       	mov	r18, r24
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	cf 56       	subi	r28, 0x6F	; 111
    2942:	df 4f       	sbci	r29, 0xFF	; 255
    2944:	39 83       	std	Y+1, r19	; 0x01
    2946:	28 83       	st	Y, r18
    2948:	c1 59       	subi	r28, 0x91	; 145
    294a:	d0 40       	sbci	r29, 0x00	; 0
    294c:	cf 56       	subi	r28, 0x6F	; 111
    294e:	df 4f       	sbci	r29, 0xFF	; 255
    2950:	88 81       	ld	r24, Y
    2952:	99 81       	ldd	r25, Y+1	; 0x01
    2954:	c1 59       	subi	r28, 0x91	; 145
    2956:	d0 40       	sbci	r29, 0x00	; 0
    2958:	8b 32       	cpi	r24, 0x2B	; 43
    295a:	91 05       	cpc	r25, r1
    295c:	09 f4       	brne	.+2      	; 0x2960 <main+0xc8e>
    295e:	57 c0       	rjmp	.+174    	; 0x2a0e <main+0xd3c>
    2960:	cf 56       	subi	r28, 0x6F	; 111
    2962:	df 4f       	sbci	r29, 0xFF	; 255
    2964:	e8 81       	ld	r30, Y
    2966:	f9 81       	ldd	r31, Y+1	; 0x01
    2968:	c1 59       	subi	r28, 0x91	; 145
    296a:	d0 40       	sbci	r29, 0x00	; 0
    296c:	ec 32       	cpi	r30, 0x2C	; 44
    296e:	f1 05       	cpc	r31, r1
    2970:	5c f4       	brge	.+22     	; 0x2988 <main+0xcb6>
    2972:	cf 56       	subi	r28, 0x6F	; 111
    2974:	df 4f       	sbci	r29, 0xFF	; 255
    2976:	28 81       	ld	r18, Y
    2978:	39 81       	ldd	r19, Y+1	; 0x01
    297a:	c1 59       	subi	r28, 0x91	; 145
    297c:	d0 40       	sbci	r29, 0x00	; 0
    297e:	2a 32       	cpi	r18, 0x2A	; 42
    2980:	31 05       	cpc	r19, r1
    2982:	09 f4       	brne	.+2      	; 0x2986 <main+0xcb4>
    2984:	7a c0       	rjmp	.+244    	; 0x2a7a <main+0xda8>
    2986:	aa c0       	rjmp	.+340    	; 0x2adc <main+0xe0a>
    2988:	cf 56       	subi	r28, 0x6F	; 111
    298a:	df 4f       	sbci	r29, 0xFF	; 255
    298c:	88 81       	ld	r24, Y
    298e:	99 81       	ldd	r25, Y+1	; 0x01
    2990:	c1 59       	subi	r28, 0x91	; 145
    2992:	d0 40       	sbci	r29, 0x00	; 0
    2994:	8d 32       	cpi	r24, 0x2D	; 45
    2996:	91 05       	cpc	r25, r1
    2998:	09 f4       	brne	.+2      	; 0x299c <main+0xcca>
    299a:	54 c0       	rjmp	.+168    	; 0x2a44 <main+0xd72>
    299c:	cf 56       	subi	r28, 0x6F	; 111
    299e:	df 4f       	sbci	r29, 0xFF	; 255
    29a0:	e8 81       	ld	r30, Y
    29a2:	f9 81       	ldd	r31, Y+1	; 0x01
    29a4:	c1 59       	subi	r28, 0x91	; 145
    29a6:	d0 40       	sbci	r29, 0x00	; 0
    29a8:	ef 32       	cpi	r30, 0x2F	; 47
    29aa:	f1 05       	cpc	r31, r1
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <main+0xcde>
    29ae:	7c c0       	rjmp	.+248    	; 0x2aa8 <main+0xdd6>
    29b0:	95 c0       	rjmp	.+298    	; 0x2adc <main+0xe0a>
						_delay_ms(200);
					}while(KpValue == '\0');
					if(KpValue == '=' ){
						LCD_Send_Char_Pos(KpValue,1,counter2+1);
						break;}
					SecondNum[counter3]=KpValue;
    29b2:	fe 01       	movw	r30, r28
    29b4:	e3 57       	subi	r30, 0x73	; 115
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	88 2f       	mov	r24, r24
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	20 91 eb 00 	lds	r18, 0x00EB
    29c2:	fc 01       	movw	r30, r24
    29c4:	e0 5e       	subi	r30, 0xE0	; 224
    29c6:	fe 4f       	sbci	r31, 0xFE	; 254
    29c8:	20 83       	st	Z, r18
					counter2++;
    29ca:	de 01       	movw	r26, r28
    29cc:	a2 57       	subi	r26, 0x72	; 114
    29ce:	bf 4f       	sbci	r27, 0xFF	; 255
    29d0:	fe 01       	movw	r30, r28
    29d2:	e2 57       	subi	r30, 0x72	; 114
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	8f 5f       	subi	r24, 0xFF	; 255
    29da:	8c 93       	st	X, r24
					counter3++;
    29dc:	de 01       	movw	r26, r28
    29de:	a3 57       	subi	r26, 0x73	; 115
    29e0:	bf 4f       	sbci	r27, 0xFF	; 255
    29e2:	fe 01       	movw	r30, r28
    29e4:	e3 57       	subi	r30, 0x73	; 115
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 81       	ld	r24, Z
    29ea:	8f 5f       	subi	r24, 0xFF	; 255
    29ec:	8c 93       	st	X, r24
					LCD_Send_Number_Pos(KpValue,1,counter2);
    29ee:	80 91 eb 00 	lds	r24, 0x00EB
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a0 e0       	ldi	r26, 0x00	; 0
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	fe 01       	movw	r30, r28
    29fc:	e2 57       	subi	r30, 0x72	; 114
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	41 e0       	ldi	r20, 0x01	; 1
    2a06:	20 81       	ld	r18, Z
    2a08:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_Send_Number_Pos>
    2a0c:	06 cf       	rjmp	.-500    	; 0x281a <main+0xb48>


				/*     switch which operation was Selected */
				switch(opration)
				{
					case '+': LCD_Send_Number_Pos(calc_sum(FristNum,SecondNum,counter,counter3),1,counter2+3);break;
    2a0e:	40 91 fe 00 	lds	r20, 0x00FE
    2a12:	84 e2       	ldi	r24, 0x24	; 36
    2a14:	91 e0       	ldi	r25, 0x01	; 1
    2a16:	20 e2       	ldi	r18, 0x20	; 32
    2a18:	31 e0       	ldi	r19, 0x01	; 1
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e3 57       	subi	r30, 0x73	; 115
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	b9 01       	movw	r22, r18
    2a22:	20 81       	ld	r18, Z
    2a24:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <calc_sum>
    2a28:	cc 01       	movw	r24, r24
    2a2a:	a0 e0       	ldi	r26, 0x00	; 0
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e2 57       	subi	r30, 0x72	; 114
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	20 81       	ld	r18, Z
    2a36:	2d 5f       	subi	r18, 0xFD	; 253
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_Send_Number_Pos>
    2a42:	4c c0       	rjmp	.+152    	; 0x2adc <main+0xe0a>
					case '-': LCD_Send_Number_Pos(calc_sub(FristNum,SecondNum,counter,counter3),1,counter2+3);break;
    2a44:	40 91 fe 00 	lds	r20, 0x00FE
    2a48:	84 e2       	ldi	r24, 0x24	; 36
    2a4a:	91 e0       	ldi	r25, 0x01	; 1
    2a4c:	20 e2       	ldi	r18, 0x20	; 32
    2a4e:	31 e0       	ldi	r19, 0x01	; 1
    2a50:	fe 01       	movw	r30, r28
    2a52:	e3 57       	subi	r30, 0x73	; 115
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	b9 01       	movw	r22, r18
    2a58:	20 81       	ld	r18, Z
    2a5a:	0e 94 30 17 	call	0x2e60	; 0x2e60 <calc_sub>
    2a5e:	cc 01       	movw	r24, r24
    2a60:	a0 e0       	ldi	r26, 0x00	; 0
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	fe 01       	movw	r30, r28
    2a66:	e2 57       	subi	r30, 0x72	; 114
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	20 81       	ld	r18, Z
    2a6c:	2d 5f       	subi	r18, 0xFD	; 253
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	41 e0       	ldi	r20, 0x01	; 1
    2a74:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_Send_Number_Pos>
    2a78:	31 c0       	rjmp	.+98     	; 0x2adc <main+0xe0a>
					case '*': LCD_Send_Number_Pos(calc_multi(FristNum,SecondNum,counter,counter3),1,+3);break;
    2a7a:	40 91 fe 00 	lds	r20, 0x00FE
    2a7e:	84 e2       	ldi	r24, 0x24	; 36
    2a80:	91 e0       	ldi	r25, 0x01	; 1
    2a82:	20 e2       	ldi	r18, 0x20	; 32
    2a84:	31 e0       	ldi	r19, 0x01	; 1
    2a86:	fe 01       	movw	r30, r28
    2a88:	e3 57       	subi	r30, 0x73	; 115
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	b9 01       	movw	r22, r18
    2a8e:	20 81       	ld	r18, Z
    2a90:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <calc_multi>
    2a94:	cc 01       	movw	r24, r24
    2a96:	a0 e0       	ldi	r26, 0x00	; 0
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	23 e0       	ldi	r18, 0x03	; 3
    2aa2:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_Send_Number_Pos>
    2aa6:	1a c0       	rjmp	.+52     	; 0x2adc <main+0xe0a>
					case '/': LCD_Send_Number_Pos(calc_div(FristNum,SecondNum,counter,counter3),1,counter2+3);break;
    2aa8:	40 91 fe 00 	lds	r20, 0x00FE
    2aac:	84 e2       	ldi	r24, 0x24	; 36
    2aae:	91 e0       	ldi	r25, 0x01	; 1
    2ab0:	20 e2       	ldi	r18, 0x20	; 32
    2ab2:	31 e0       	ldi	r19, 0x01	; 1
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e3 57       	subi	r30, 0x73	; 115
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	b9 01       	movw	r22, r18
    2abc:	20 81       	ld	r18, Z
    2abe:	0e 94 2a 18 	call	0x3054	; 0x3054 <calc_div>
    2ac2:	cc 01       	movw	r24, r24
    2ac4:	a0 e0       	ldi	r26, 0x00	; 0
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e2 57       	subi	r30, 0x72	; 114
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	20 81       	ld	r18, Z
    2ad0:	2d 5f       	subi	r18, 0xFD	; 253
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_Send_Number_Pos>
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	90 e8       	ldi	r25, 0x80	; 128
    2ae0:	ab e3       	ldi	r26, 0x3B	; 59
    2ae2:	b5 e4       	ldi	r27, 0x45	; 69
    2ae4:	89 8f       	std	Y+25, r24	; 0x19
    2ae6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ae8:	ab 8f       	std	Y+27, r26	; 0x1b
    2aea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aec:	69 8d       	ldd	r22, Y+25	; 0x19
    2aee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	4a ef       	ldi	r20, 0xFA	; 250
    2afa:	54 e4       	ldi	r21, 0x44	; 68
    2afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	8d 8b       	std	Y+21, r24	; 0x15
    2b06:	9e 8b       	std	Y+22, r25	; 0x16
    2b08:	af 8b       	std	Y+23, r26	; 0x17
    2b0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b10:	8f 89       	ldd	r24, Y+23	; 0x17
    2b12:	98 8d       	ldd	r25, Y+24	; 0x18
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e8       	ldi	r20, 0x80	; 128
    2b1a:	5f e3       	ldi	r21, 0x3F	; 63
    2b1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b20:	88 23       	and	r24, r24
    2b22:	2c f4       	brge	.+10     	; 0x2b2e <main+0xe5c>
		__ticks = 1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	9c 8b       	std	Y+20, r25	; 0x14
    2b2a:	8b 8b       	std	Y+19, r24	; 0x13
    2b2c:	3f c0       	rjmp	.+126    	; 0x2bac <main+0xeda>
	else if (__tmp > 65535)
    2b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b30:	7e 89       	ldd	r23, Y+22	; 0x16
    2b32:	8f 89       	ldd	r24, Y+23	; 0x17
    2b34:	98 8d       	ldd	r25, Y+24	; 0x18
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	3f ef       	ldi	r19, 0xFF	; 255
    2b3a:	4f e7       	ldi	r20, 0x7F	; 127
    2b3c:	57 e4       	ldi	r21, 0x47	; 71
    2b3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b42:	18 16       	cp	r1, r24
    2b44:	4c f5       	brge	.+82     	; 0x2b98 <main+0xec6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b46:	69 8d       	ldd	r22, Y+25	; 0x19
    2b48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e2       	ldi	r20, 0x20	; 32
    2b54:	51 e4       	ldi	r21, 0x41	; 65
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9c 8b       	std	Y+20, r25	; 0x14
    2b6c:	8b 8b       	std	Y+19, r24	; 0x13
    2b6e:	0f c0       	rjmp	.+30     	; 0x2b8e <main+0xebc>
    2b70:	88 ec       	ldi	r24, 0xC8	; 200
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	9a 8b       	std	Y+18, r25	; 0x12
    2b76:	89 8b       	std	Y+17, r24	; 0x11
    2b78:	89 89       	ldd	r24, Y+17	; 0x11
    2b7a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <main+0xeaa>
    2b80:	9a 8b       	std	Y+18, r25	; 0x12
    2b82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b84:	8b 89       	ldd	r24, Y+19	; 0x13
    2b86:	9c 89       	ldd	r25, Y+20	; 0x14
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	9c 8b       	std	Y+20, r25	; 0x14
    2b8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b90:	9c 89       	ldd	r25, Y+20	; 0x14
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	69 f7       	brne	.-38     	; 0x2b70 <main+0xe9e>
    2b96:	14 c0       	rjmp	.+40     	; 0x2bc0 <main+0xeee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b98:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	9c 8b       	std	Y+20, r25	; 0x14
    2baa:	8b 8b       	std	Y+19, r24	; 0x13
    2bac:	8b 89       	ldd	r24, Y+19	; 0x13
    2bae:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb0:	98 8b       	std	Y+16, r25	; 0x10
    2bb2:	8f 87       	std	Y+15, r24	; 0x0f
    2bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bb6:	98 89       	ldd	r25, Y+16	; 0x10
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <main+0xee6>
    2bbc:	98 8b       	std	Y+16, r25	; 0x10
    2bbe:	8f 87       	std	Y+15, r24	; 0x0f
				}
				_delay_ms(3000);
				LCD_Send_Command(lcd_clear);
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
    2bc6:	d0 cc       	rjmp	.-1632   	; 0x2568 <main+0x896>
				}

		}
		/*   This Segment if The Password is Wrong    */
		else{
			LCD_Send_Command(lcd_clear);
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_Send_Command>
			LCD_Send_String_Pos("Wrong password",1,1);
    2bce:	8b e9       	ldi	r24, 0x9B	; 155
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	61 e0       	ldi	r22, 0x01	; 1
    2bd4:	41 e0       	ldi	r20, 0x01	; 1
    2bd6:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <LCD_Send_String_Pos>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	aa ef       	ldi	r26, 0xFA	; 250
    2be0:	b4 e4       	ldi	r27, 0x44	; 68
    2be2:	8b 87       	std	Y+11, r24	; 0x0b
    2be4:	9c 87       	std	Y+12, r25	; 0x0c
    2be6:	ad 87       	std	Y+13, r26	; 0x0d
    2be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4a ef       	ldi	r20, 0xFA	; 250
    2bf8:	54 e4       	ldi	r21, 0x44	; 68
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8f 83       	std	Y+7, r24	; 0x07
    2c04:	98 87       	std	Y+8, r25	; 0x08
    2c06:	a9 87       	std	Y+9, r26	; 0x09
    2c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0c:	78 85       	ldd	r23, Y+8	; 0x08
    2c0e:	89 85       	ldd	r24, Y+9	; 0x09
    2c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	2c f4       	brge	.+10     	; 0x2c2c <main+0xf5a>
		__ticks = 1;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
    2c2a:	3f c0       	rjmp	.+126    	; 0x2caa <main+0xfd8>
	else if (__tmp > 65535)
    2c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2e:	78 85       	ldd	r23, Y+8	; 0x08
    2c30:	89 85       	ldd	r24, Y+9	; 0x09
    2c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	4c f5       	brge	.+82     	; 0x2c96 <main+0xfc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e2       	ldi	r20, 0x20	; 32
    2c52:	51 e4       	ldi	r21, 0x41	; 65
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
    2c6c:	0f c0       	rjmp	.+30     	; 0x2c8c <main+0xfba>
    2c6e:	88 ec       	ldi	r24, 0xC8	; 200
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 83       	std	Y+4, r25	; 0x04
    2c74:	8b 83       	std	Y+3, r24	; 0x03
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	f1 f7       	brne	.-4      	; 0x2c7a <main+0xfa8>
    2c7e:	9c 83       	std	Y+4, r25	; 0x04
    2c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	69 f7       	brne	.-38     	; 0x2c6e <main+0xf9c>
    2c94:	19 c9       	rjmp	.-3534   	; 0x1ec8 <main+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c96:	6f 81       	ldd	r22, Y+7	; 0x07
    2c98:	78 85       	ldd	r23, Y+8	; 0x08
    2c9a:	89 85       	ldd	r24, Y+9	; 0x09
    2c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <main+0xfe4>
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	04 c9       	rjmp	.-3576   	; 0x1ec8 <main+0x1f6>

00002cc0 <INT0_Interrupt>:
	}
}


void INT0_Interrupt()
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
	Reset=0;
    2cc8:	10 92 ec 00 	sts	0x00EC, r1
}
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	08 95       	ret

00002cd2 <Cheack_Password>:

u8 Cheack_Password(u8 a[],u8 b[],u8 n)
{
    2cd2:	df 93       	push	r29
    2cd4:	cf 93       	push	r28
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	28 97       	sbiw	r28, 0x08	; 8
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	de bf       	out	0x3e, r29	; 62
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	cd bf       	out	0x3d, r28	; 61
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	8b 83       	std	Y+3, r24	; 0x03
    2cea:	7e 83       	std	Y+6, r23	; 0x06
    2cec:	6d 83       	std	Y+5, r22	; 0x05
    2cee:	4f 83       	std	Y+7, r20	; 0x07
	u8 ret=0;
    2cf0:	1a 82       	std	Y+2, r1	; 0x02
	for(u8 counter =0; counter<n-1;counter++)
    2cf2:	19 82       	std	Y+1, r1	; 0x01
    2cf4:	1a c0       	rjmp	.+52     	; 0x2d2a <Cheack_Password+0x58>
	{
		if(a[counter] == b[counter])
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	28 2f       	mov	r18, r24
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2d00:	fc 01       	movw	r30, r24
    2d02:	e2 0f       	add	r30, r18
    2d04:	f3 1f       	adc	r31, r19
    2d06:	40 81       	ld	r20, Z
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d10:	9e 81       	ldd	r25, Y+6	; 0x06
    2d12:	fc 01       	movw	r30, r24
    2d14:	e2 0f       	add	r30, r18
    2d16:	f3 1f       	adc	r31, r19
    2d18:	80 81       	ld	r24, Z
    2d1a:	48 17       	cp	r20, r24
    2d1c:	19 f4       	brne	.+6      	; 0x2d24 <Cheack_Password+0x52>
		{
			ret++;
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	8f 5f       	subi	r24, 0xFF	; 255
    2d22:	8a 83       	std	Y+2, r24	; 0x02
}

u8 Cheack_Password(u8 a[],u8 b[],u8 n)
{
	u8 ret=0;
	for(u8 counter =0; counter<n-1;counter++)
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	8f 5f       	subi	r24, 0xFF	; 255
    2d28:	89 83       	std	Y+1, r24	; 0x01
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	28 2f       	mov	r18, r24
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	8f 81       	ldd	r24, Y+7	; 0x07
    2d32:	88 2f       	mov	r24, r24
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	28 17       	cp	r18, r24
    2d3a:	39 07       	cpc	r19, r25
    2d3c:	e4 f2       	brlt	.-72     	; 0x2cf6 <Cheack_Password+0x24>
		if(a[counter] == b[counter])
		{
			ret++;
		}
	}
	if(ret == n-1)
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	28 2f       	mov	r18, r24
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	8f 81       	ldd	r24, Y+7	; 0x07
    2d46:	88 2f       	mov	r24, r24
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	28 17       	cp	r18, r24
    2d4e:	39 07       	cpc	r19, r25
    2d50:	19 f4       	brne	.+6      	; 0x2d58 <Cheack_Password+0x86>
		return 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	88 87       	std	Y+8, r24	; 0x08
    2d56:	01 c0       	rjmp	.+2      	; 0x2d5a <Cheack_Password+0x88>
	else
		return 0;
    2d58:	18 86       	std	Y+8, r1	; 0x08
    2d5a:	88 85       	ldd	r24, Y+8	; 0x08
}
    2d5c:	28 96       	adiw	r28, 0x08	; 8
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <calc_sum>:

u16 calc_sum(u8 a[],u8 b[],u8 n,u8 m){
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	2c 97       	sbiw	r28, 0x0c	; 12
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	98 87       	std	Y+8, r25	; 0x08
    2d84:	8f 83       	std	Y+7, r24	; 0x07
    2d86:	7a 87       	std	Y+10, r23	; 0x0a
    2d88:	69 87       	std	Y+9, r22	; 0x09
    2d8a:	4b 87       	std	Y+11, r20	; 0x0b
    2d8c:	2c 87       	std	Y+12, r18	; 0x0c
	u16 num1=a[0];
    2d8e:	ef 81       	ldd	r30, Y+7	; 0x07
    2d90:	f8 85       	ldd	r31, Y+8	; 0x08
    2d92:	80 81       	ld	r24, Z
    2d94:	88 2f       	mov	r24, r24
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	9e 83       	std	Y+6, r25	; 0x06
    2d9a:	8d 83       	std	Y+5, r24	; 0x05
	u16 num2=b[0];
    2d9c:	e9 85       	ldd	r30, Y+9	; 0x09
    2d9e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2da0:	80 81       	ld	r24, Z
    2da2:	88 2f       	mov	r24, r24
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9c 83       	std	Y+4, r25	; 0x04
    2da8:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 counter=1;counter<n;counter++)
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	8a 83       	std	Y+2, r24	; 0x02
    2dae:	1f c0       	rjmp	.+62     	; 0x2dee <calc_sum+0x80>
	{

		num1 = num1*10 +a[counter];
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	9c 01       	movw	r18, r24
    2db6:	22 0f       	add	r18, r18
    2db8:	33 1f       	adc	r19, r19
    2dba:	c9 01       	movw	r24, r18
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	88 0f       	add	r24, r24
    2dc2:	99 1f       	adc	r25, r25
    2dc4:	a9 01       	movw	r20, r18
    2dc6:	48 0f       	add	r20, r24
    2dc8:	59 1f       	adc	r21, r25
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd2:	98 85       	ldd	r25, Y+8	; 0x08
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	e2 0f       	add	r30, r18
    2dd8:	f3 1f       	adc	r31, r19
    2dda:	80 81       	ld	r24, Z
    2ddc:	88 2f       	mov	r24, r24
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	84 0f       	add	r24, r20
    2de2:	95 1f       	adc	r25, r21
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
}

u16 calc_sum(u8 a[],u8 b[],u8 n,u8 m){
	u16 num1=a[0];
	u16 num2=b[0];
	for(u8 counter=1;counter<n;counter++)
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	8f 5f       	subi	r24, 0xFF	; 255
    2dec:	8a 83       	std	Y+2, r24	; 0x02
    2dee:	9a 81       	ldd	r25, Y+2	; 0x02
    2df0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2df2:	98 17       	cp	r25, r24
    2df4:	e8 f2       	brcs	.-70     	; 0x2db0 <calc_sum+0x42>
	{

		num1 = num1*10 +a[counter];
	}

	for(u8 counter=1;counter<m;counter++)
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	1f c0       	rjmp	.+62     	; 0x2e3a <calc_sum+0xcc>
	{
		num2= num2*10 +b[counter];
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2e00:	9c 01       	movw	r18, r24
    2e02:	22 0f       	add	r18, r18
    2e04:	33 1f       	adc	r19, r19
    2e06:	c9 01       	movw	r24, r18
    2e08:	88 0f       	add	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	a9 01       	movw	r20, r18
    2e12:	48 0f       	add	r20, r24
    2e14:	59 1f       	adc	r21, r25
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	89 85       	ldd	r24, Y+9	; 0x09
    2e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e20:	fc 01       	movw	r30, r24
    2e22:	e2 0f       	add	r30, r18
    2e24:	f3 1f       	adc	r31, r19
    2e26:	80 81       	ld	r24, Z
    2e28:	88 2f       	mov	r24, r24
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	84 0f       	add	r24, r20
    2e2e:	95 1f       	adc	r25, r21
    2e30:	9c 83       	std	Y+4, r25	; 0x04
    2e32:	8b 83       	std	Y+3, r24	; 0x03
	{

		num1 = num1*10 +a[counter];
	}

	for(u8 counter=1;counter<m;counter++)
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	8f 5f       	subi	r24, 0xFF	; 255
    2e38:	89 83       	std	Y+1, r24	; 0x01
    2e3a:	99 81       	ldd	r25, Y+1	; 0x01
    2e3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e3e:	98 17       	cp	r25, r24
    2e40:	e8 f2       	brcs	.-70     	; 0x2dfc <calc_sum+0x8e>
	{
		num2= num2*10 +b[counter];
	}

	return (num1+num2);
    2e42:	2d 81       	ldd	r18, Y+5	; 0x05
    2e44:	3e 81       	ldd	r19, Y+6	; 0x06
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4a:	82 0f       	add	r24, r18
    2e4c:	93 1f       	adc	r25, r19
}
    2e4e:	2c 96       	adiw	r28, 0x0c	; 12
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <calc_sub>:

u16 calc_sub(u8 a[],u8 b[],u8 n,u8 m){
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	2c 97       	sbiw	r28, 0x0c	; 12
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	98 87       	std	Y+8, r25	; 0x08
    2e76:	8f 83       	std	Y+7, r24	; 0x07
    2e78:	7a 87       	std	Y+10, r23	; 0x0a
    2e7a:	69 87       	std	Y+9, r22	; 0x09
    2e7c:	4b 87       	std	Y+11, r20	; 0x0b
    2e7e:	2c 87       	std	Y+12, r18	; 0x0c
	u16 num1=a[0];
    2e80:	ef 81       	ldd	r30, Y+7	; 0x07
    2e82:	f8 85       	ldd	r31, Y+8	; 0x08
    2e84:	80 81       	ld	r24, Z
    2e86:	88 2f       	mov	r24, r24
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	9e 83       	std	Y+6, r25	; 0x06
    2e8c:	8d 83       	std	Y+5, r24	; 0x05
	u16 num2=b[0];
    2e8e:	e9 85       	ldd	r30, Y+9	; 0x09
    2e90:	fa 85       	ldd	r31, Y+10	; 0x0a
    2e92:	80 81       	ld	r24, Z
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9c 83       	std	Y+4, r25	; 0x04
    2e9a:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 counter=1;counter<n;counter++)
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	8a 83       	std	Y+2, r24	; 0x02
    2ea0:	1f c0       	rjmp	.+62     	; 0x2ee0 <calc_sub+0x80>
	{
		num1 = num1*10 +a[counter];
    2ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea6:	9c 01       	movw	r18, r24
    2ea8:	22 0f       	add	r18, r18
    2eaa:	33 1f       	adc	r19, r19
    2eac:	c9 01       	movw	r24, r18
    2eae:	88 0f       	add	r24, r24
    2eb0:	99 1f       	adc	r25, r25
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	a9 01       	movw	r20, r18
    2eb8:	48 0f       	add	r20, r24
    2eba:	59 1f       	adc	r21, r25
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ec4:	98 85       	ldd	r25, Y+8	; 0x08
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	e2 0f       	add	r30, r18
    2eca:	f3 1f       	adc	r31, r19
    2ecc:	80 81       	ld	r24, Z
    2ece:	88 2f       	mov	r24, r24
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	84 0f       	add	r24, r20
    2ed4:	95 1f       	adc	r25, r21
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
}

u16 calc_sub(u8 a[],u8 b[],u8 n,u8 m){
	u16 num1=a[0];
	u16 num2=b[0];
	for(u8 counter=1;counter<n;counter++)
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	8f 5f       	subi	r24, 0xFF	; 255
    2ede:	8a 83       	std	Y+2, r24	; 0x02
    2ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ee4:	98 17       	cp	r25, r24
    2ee6:	e8 f2       	brcs	.-70     	; 0x2ea2 <calc_sub+0x42>
	{
		num1 = num1*10 +a[counter];
	}

	for(u8 counter=1;counter<m;counter++)
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	89 83       	std	Y+1, r24	; 0x01
    2eec:	1f c0       	rjmp	.+62     	; 0x2f2c <calc_sub+0xcc>
	{
		num2= num2*10 +b[counter];
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef2:	9c 01       	movw	r18, r24
    2ef4:	22 0f       	add	r18, r18
    2ef6:	33 1f       	adc	r19, r19
    2ef8:	c9 01       	movw	r24, r18
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	88 0f       	add	r24, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	a9 01       	movw	r20, r18
    2f04:	48 0f       	add	r20, r24
    2f06:	59 1f       	adc	r21, r25
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	89 85       	ldd	r24, Y+9	; 0x09
    2f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f12:	fc 01       	movw	r30, r24
    2f14:	e2 0f       	add	r30, r18
    2f16:	f3 1f       	adc	r31, r19
    2f18:	80 81       	ld	r24, Z
    2f1a:	88 2f       	mov	r24, r24
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	84 0f       	add	r24, r20
    2f20:	95 1f       	adc	r25, r21
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 counter=1;counter<n;counter++)
	{
		num1 = num1*10 +a[counter];
	}

	for(u8 counter=1;counter<m;counter++)
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	8f 5f       	subi	r24, 0xFF	; 255
    2f2a:	89 83       	std	Y+1, r24	; 0x01
    2f2c:	99 81       	ldd	r25, Y+1	; 0x01
    2f2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f30:	98 17       	cp	r25, r24
    2f32:	e8 f2       	brcs	.-70     	; 0x2eee <calc_sub+0x8e>
	{
		num2= num2*10 +b[counter];
	}

	return (num1-num2);
    2f34:	2d 81       	ldd	r18, Y+5	; 0x05
    2f36:	3e 81       	ldd	r19, Y+6	; 0x06
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3c:	a9 01       	movw	r20, r18
    2f3e:	48 1b       	sub	r20, r24
    2f40:	59 0b       	sbc	r21, r25
    2f42:	ca 01       	movw	r24, r20
}
    2f44:	2c 96       	adiw	r28, 0x0c	; 12
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <calc_multi>:

u16 calc_multi(u8 a[],u8 b[],u8 n,u8 m){
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	2c 97       	sbiw	r28, 0x0c	; 12
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
    2f6a:	98 87       	std	Y+8, r25	; 0x08
    2f6c:	8f 83       	std	Y+7, r24	; 0x07
    2f6e:	7a 87       	std	Y+10, r23	; 0x0a
    2f70:	69 87       	std	Y+9, r22	; 0x09
    2f72:	4b 87       	std	Y+11, r20	; 0x0b
    2f74:	2c 87       	std	Y+12, r18	; 0x0c
	u16 num1=a[0];
    2f76:	ef 81       	ldd	r30, Y+7	; 0x07
    2f78:	f8 85       	ldd	r31, Y+8	; 0x08
    2f7a:	80 81       	ld	r24, Z
    2f7c:	88 2f       	mov	r24, r24
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	9e 83       	std	Y+6, r25	; 0x06
    2f82:	8d 83       	std	Y+5, r24	; 0x05
	u16 num2=b[0];
    2f84:	e9 85       	ldd	r30, Y+9	; 0x09
    2f86:	fa 85       	ldd	r31, Y+10	; 0x0a
    2f88:	80 81       	ld	r24, Z
    2f8a:	88 2f       	mov	r24, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	9c 83       	std	Y+4, r25	; 0x04
    2f90:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 counter=1;counter<n;counter++)
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	8a 83       	std	Y+2, r24	; 0x02
    2f96:	1f c0       	rjmp	.+62     	; 0x2fd6 <calc_multi+0x80>
	{
		num1 = num1*10 +a[counter];
    2f98:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9c:	9c 01       	movw	r18, r24
    2f9e:	22 0f       	add	r18, r18
    2fa0:	33 1f       	adc	r19, r19
    2fa2:	c9 01       	movw	r24, r18
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	88 0f       	add	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	a9 01       	movw	r20, r18
    2fae:	48 0f       	add	r20, r24
    2fb0:	59 1f       	adc	r21, r25
    2fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb4:	28 2f       	mov	r18, r24
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	8f 81       	ldd	r24, Y+7	; 0x07
    2fba:	98 85       	ldd	r25, Y+8	; 0x08
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	e2 0f       	add	r30, r18
    2fc0:	f3 1f       	adc	r31, r19
    2fc2:	80 81       	ld	r24, Z
    2fc4:	88 2f       	mov	r24, r24
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	84 0f       	add	r24, r20
    2fca:	95 1f       	adc	r25, r21
    2fcc:	9e 83       	std	Y+6, r25	; 0x06
    2fce:	8d 83       	std	Y+5, r24	; 0x05
}

u16 calc_multi(u8 a[],u8 b[],u8 n,u8 m){
	u16 num1=a[0];
	u16 num2=b[0];
	for(u8 counter=1;counter<n;counter++)
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	8f 5f       	subi	r24, 0xFF	; 255
    2fd4:	8a 83       	std	Y+2, r24	; 0x02
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fda:	98 17       	cp	r25, r24
    2fdc:	e8 f2       	brcs	.-70     	; 0x2f98 <calc_multi+0x42>
	{
		num1 = num1*10 +a[counter];
	}

	for(u8 counter=1;counter<m;counter++)
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	1f c0       	rjmp	.+62     	; 0x3022 <calc_multi+0xcc>
	{
		num2= num2*10 +b[counter];
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe8:	9c 01       	movw	r18, r24
    2fea:	22 0f       	add	r18, r18
    2fec:	33 1f       	adc	r19, r19
    2fee:	c9 01       	movw	r24, r18
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	a9 01       	movw	r20, r18
    2ffa:	48 0f       	add	r20, r24
    2ffc:	59 1f       	adc	r21, r25
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	28 2f       	mov	r18, r24
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	89 85       	ldd	r24, Y+9	; 0x09
    3006:	9a 85       	ldd	r25, Y+10	; 0x0a
    3008:	fc 01       	movw	r30, r24
    300a:	e2 0f       	add	r30, r18
    300c:	f3 1f       	adc	r31, r19
    300e:	80 81       	ld	r24, Z
    3010:	88 2f       	mov	r24, r24
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	84 0f       	add	r24, r20
    3016:	95 1f       	adc	r25, r21
    3018:	9c 83       	std	Y+4, r25	; 0x04
    301a:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 counter=1;counter<n;counter++)
	{
		num1 = num1*10 +a[counter];
	}

	for(u8 counter=1;counter<m;counter++)
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	8f 5f       	subi	r24, 0xFF	; 255
    3020:	89 83       	std	Y+1, r24	; 0x01
    3022:	99 81       	ldd	r25, Y+1	; 0x01
    3024:	8c 85       	ldd	r24, Y+12	; 0x0c
    3026:	98 17       	cp	r25, r24
    3028:	e8 f2       	brcs	.-70     	; 0x2fe4 <calc_multi+0x8e>
	{
		num2= num2*10 +b[counter];
	}

	return (num1*num2);
    302a:	2d 81       	ldd	r18, Y+5	; 0x05
    302c:	3e 81       	ldd	r19, Y+6	; 0x06
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	ac 01       	movw	r20, r24
    3034:	24 9f       	mul	r18, r20
    3036:	c0 01       	movw	r24, r0
    3038:	25 9f       	mul	r18, r21
    303a:	90 0d       	add	r25, r0
    303c:	34 9f       	mul	r19, r20
    303e:	90 0d       	add	r25, r0
    3040:	11 24       	eor	r1, r1
}
    3042:	2c 96       	adiw	r28, 0x0c	; 12
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	08 95       	ret

00003054 <calc_div>:

u16 calc_div(u8 a[],u8 b[],u8 n,u8 m){
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	2c 97       	sbiw	r28, 0x0c	; 12
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	98 87       	std	Y+8, r25	; 0x08
    306a:	8f 83       	std	Y+7, r24	; 0x07
    306c:	7a 87       	std	Y+10, r23	; 0x0a
    306e:	69 87       	std	Y+9, r22	; 0x09
    3070:	4b 87       	std	Y+11, r20	; 0x0b
    3072:	2c 87       	std	Y+12, r18	; 0x0c
	u16 num1=a[0];
    3074:	ef 81       	ldd	r30, Y+7	; 0x07
    3076:	f8 85       	ldd	r31, Y+8	; 0x08
    3078:	80 81       	ld	r24, Z
    307a:	88 2f       	mov	r24, r24
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	9e 83       	std	Y+6, r25	; 0x06
    3080:	8d 83       	std	Y+5, r24	; 0x05
	u16 num2=b[0];
    3082:	e9 85       	ldd	r30, Y+9	; 0x09
    3084:	fa 85       	ldd	r31, Y+10	; 0x0a
    3086:	80 81       	ld	r24, Z
    3088:	88 2f       	mov	r24, r24
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	9c 83       	std	Y+4, r25	; 0x04
    308e:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 counter=1;counter<n;counter++)
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	8a 83       	std	Y+2, r24	; 0x02
    3094:	1f c0       	rjmp	.+62     	; 0x30d4 <calc_div+0x80>
	{
		num1 = num1*10 +a[counter];
    3096:	8d 81       	ldd	r24, Y+5	; 0x05
    3098:	9e 81       	ldd	r25, Y+6	; 0x06
    309a:	9c 01       	movw	r18, r24
    309c:	22 0f       	add	r18, r18
    309e:	33 1f       	adc	r19, r19
    30a0:	c9 01       	movw	r24, r18
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	a9 01       	movw	r20, r18
    30ac:	48 0f       	add	r20, r24
    30ae:	59 1f       	adc	r21, r25
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	8f 81       	ldd	r24, Y+7	; 0x07
    30b8:	98 85       	ldd	r25, Y+8	; 0x08
    30ba:	fc 01       	movw	r30, r24
    30bc:	e2 0f       	add	r30, r18
    30be:	f3 1f       	adc	r31, r19
    30c0:	80 81       	ld	r24, Z
    30c2:	88 2f       	mov	r24, r24
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	84 0f       	add	r24, r20
    30c8:	95 1f       	adc	r25, r21
    30ca:	9e 83       	std	Y+6, r25	; 0x06
    30cc:	8d 83       	std	Y+5, r24	; 0x05
}

u16 calc_div(u8 a[],u8 b[],u8 n,u8 m){
	u16 num1=a[0];
	u16 num2=b[0];
	for(u8 counter=1;counter<n;counter++)
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	8f 5f       	subi	r24, 0xFF	; 255
    30d2:	8a 83       	std	Y+2, r24	; 0x02
    30d4:	9a 81       	ldd	r25, Y+2	; 0x02
    30d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    30d8:	98 17       	cp	r25, r24
    30da:	e8 f2       	brcs	.-70     	; 0x3096 <calc_div+0x42>
	{
		num1 = num1*10 +a[counter];
	}

	for(u8 counter=1;counter<m;counter++)
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	89 83       	std	Y+1, r24	; 0x01
    30e0:	1f c0       	rjmp	.+62     	; 0x3120 <calc_div+0xcc>
	{
		num2= num2*10 +b[counter];
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	9c 81       	ldd	r25, Y+4	; 0x04
    30e6:	9c 01       	movw	r18, r24
    30e8:	22 0f       	add	r18, r18
    30ea:	33 1f       	adc	r19, r19
    30ec:	c9 01       	movw	r24, r18
    30ee:	88 0f       	add	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	a9 01       	movw	r20, r18
    30f8:	48 0f       	add	r20, r24
    30fa:	59 1f       	adc	r21, r25
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	28 2f       	mov	r18, r24
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	89 85       	ldd	r24, Y+9	; 0x09
    3104:	9a 85       	ldd	r25, Y+10	; 0x0a
    3106:	fc 01       	movw	r30, r24
    3108:	e2 0f       	add	r30, r18
    310a:	f3 1f       	adc	r31, r19
    310c:	80 81       	ld	r24, Z
    310e:	88 2f       	mov	r24, r24
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	84 0f       	add	r24, r20
    3114:	95 1f       	adc	r25, r21
    3116:	9c 83       	std	Y+4, r25	; 0x04
    3118:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 counter=1;counter<n;counter++)
	{
		num1 = num1*10 +a[counter];
	}

	for(u8 counter=1;counter<m;counter++)
    311a:	89 81       	ldd	r24, Y+1	; 0x01
    311c:	8f 5f       	subi	r24, 0xFF	; 255
    311e:	89 83       	std	Y+1, r24	; 0x01
    3120:	99 81       	ldd	r25, Y+1	; 0x01
    3122:	8c 85       	ldd	r24, Y+12	; 0x0c
    3124:	98 17       	cp	r25, r24
    3126:	e8 f2       	brcs	.-70     	; 0x30e2 <calc_div+0x8e>
	{
		num2= num2*10 +b[counter];
	}

	return (num1/num2);
    3128:	8d 81       	ldd	r24, Y+5	; 0x05
    312a:	9e 81       	ldd	r25, Y+6	; 0x06
    312c:	2b 81       	ldd	r18, Y+3	; 0x03
    312e:	3c 81       	ldd	r19, Y+4	; 0x04
    3130:	b9 01       	movw	r22, r18
    3132:	0e 94 a5 18 	call	0x314a	; 0x314a <__udivmodhi4>
    3136:	cb 01       	movw	r24, r22
}
    3138:	2c 96       	adiw	r28, 0x0c	; 12
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <__udivmodhi4>:
    314a:	aa 1b       	sub	r26, r26
    314c:	bb 1b       	sub	r27, r27
    314e:	51 e1       	ldi	r21, 0x11	; 17
    3150:	07 c0       	rjmp	.+14     	; 0x3160 <__udivmodhi4_ep>

00003152 <__udivmodhi4_loop>:
    3152:	aa 1f       	adc	r26, r26
    3154:	bb 1f       	adc	r27, r27
    3156:	a6 17       	cp	r26, r22
    3158:	b7 07       	cpc	r27, r23
    315a:	10 f0       	brcs	.+4      	; 0x3160 <__udivmodhi4_ep>
    315c:	a6 1b       	sub	r26, r22
    315e:	b7 0b       	sbc	r27, r23

00003160 <__udivmodhi4_ep>:
    3160:	88 1f       	adc	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	5a 95       	dec	r21
    3166:	a9 f7       	brne	.-22     	; 0x3152 <__udivmodhi4_loop>
    3168:	80 95       	com	r24
    316a:	90 95       	com	r25
    316c:	bc 01       	movw	r22, r24
    316e:	cd 01       	movw	r24, r26
    3170:	08 95       	ret

00003172 <__udivmodsi4>:
    3172:	a1 e2       	ldi	r26, 0x21	; 33
    3174:	1a 2e       	mov	r1, r26
    3176:	aa 1b       	sub	r26, r26
    3178:	bb 1b       	sub	r27, r27
    317a:	fd 01       	movw	r30, r26
    317c:	0d c0       	rjmp	.+26     	; 0x3198 <__udivmodsi4_ep>

0000317e <__udivmodsi4_loop>:
    317e:	aa 1f       	adc	r26, r26
    3180:	bb 1f       	adc	r27, r27
    3182:	ee 1f       	adc	r30, r30
    3184:	ff 1f       	adc	r31, r31
    3186:	a2 17       	cp	r26, r18
    3188:	b3 07       	cpc	r27, r19
    318a:	e4 07       	cpc	r30, r20
    318c:	f5 07       	cpc	r31, r21
    318e:	20 f0       	brcs	.+8      	; 0x3198 <__udivmodsi4_ep>
    3190:	a2 1b       	sub	r26, r18
    3192:	b3 0b       	sbc	r27, r19
    3194:	e4 0b       	sbc	r30, r20
    3196:	f5 0b       	sbc	r31, r21

00003198 <__udivmodsi4_ep>:
    3198:	66 1f       	adc	r22, r22
    319a:	77 1f       	adc	r23, r23
    319c:	88 1f       	adc	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	1a 94       	dec	r1
    31a2:	69 f7       	brne	.-38     	; 0x317e <__udivmodsi4_loop>
    31a4:	60 95       	com	r22
    31a6:	70 95       	com	r23
    31a8:	80 95       	com	r24
    31aa:	90 95       	com	r25
    31ac:	9b 01       	movw	r18, r22
    31ae:	ac 01       	movw	r20, r24
    31b0:	bd 01       	movw	r22, r26
    31b2:	cf 01       	movw	r24, r30
    31b4:	08 95       	ret

000031b6 <__prologue_saves__>:
    31b6:	2f 92       	push	r2
    31b8:	3f 92       	push	r3
    31ba:	4f 92       	push	r4
    31bc:	5f 92       	push	r5
    31be:	6f 92       	push	r6
    31c0:	7f 92       	push	r7
    31c2:	8f 92       	push	r8
    31c4:	9f 92       	push	r9
    31c6:	af 92       	push	r10
    31c8:	bf 92       	push	r11
    31ca:	cf 92       	push	r12
    31cc:	df 92       	push	r13
    31ce:	ef 92       	push	r14
    31d0:	ff 92       	push	r15
    31d2:	0f 93       	push	r16
    31d4:	1f 93       	push	r17
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
    31de:	ca 1b       	sub	r28, r26
    31e0:	db 0b       	sbc	r29, r27
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	09 94       	ijmp

000031ee <__epilogue_restores__>:
    31ee:	2a 88       	ldd	r2, Y+18	; 0x12
    31f0:	39 88       	ldd	r3, Y+17	; 0x11
    31f2:	48 88       	ldd	r4, Y+16	; 0x10
    31f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    31f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    31f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    31fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    31fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    31fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3200:	b9 84       	ldd	r11, Y+9	; 0x09
    3202:	c8 84       	ldd	r12, Y+8	; 0x08
    3204:	df 80       	ldd	r13, Y+7	; 0x07
    3206:	ee 80       	ldd	r14, Y+6	; 0x06
    3208:	fd 80       	ldd	r15, Y+5	; 0x05
    320a:	0c 81       	ldd	r16, Y+4	; 0x04
    320c:	1b 81       	ldd	r17, Y+3	; 0x03
    320e:	aa 81       	ldd	r26, Y+2	; 0x02
    3210:	b9 81       	ldd	r27, Y+1	; 0x01
    3212:	ce 0f       	add	r28, r30
    3214:	d1 1d       	adc	r29, r1
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	ed 01       	movw	r28, r26
    3222:	08 95       	ret

00003224 <_exit>:
    3224:	f8 94       	cli

00003226 <__stop_program>:
    3226:	ff cf       	rjmp	.-2      	; 0x3226 <__stop_program>
